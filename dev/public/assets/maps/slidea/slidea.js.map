{"version":3,"sources":["slidea/slidea.coffee"],"names":[],"mappings":"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","file":"../../coffee/slidea/slidea.js","sourcesContent":["###\n\n         dP oo       dP\n         88          88\n.d8888b. 88 dP .d888b88 .d8888b. .d8888b.\nY8ooooo. 88 88 88'  `88 88ooood8 88'  `88\n      88 88 88 88.  .88 88.  ... 88.  .88\n`88888P' dP dP `88888P8 `88888P' `88888P8\noooooooooooooooooooooooooooooooooooooooooo\n\n@plugin    jQuery\n@license   CodeCanyon Standard / Extended\n@author    Alex Grozav\n@company   Pixevil\n@website   http://pixevil.com\n@email     alex@grozav.com\n@guide\n  Running slidea\n    $('.slidea').slidea\n      width: 1280\n      height: 720\n      layout: 'layoutName'\n\n  Using methods\n    $('.slidea').data('slidea').method_name()\n\n  Adding events\n    $('.slidea').on 'eventName', ->\n###\n\n# Default Slidea modules\n#\n\n(($, window, document) ->\n  \"use strict\"\n\n  # @Slidea\n  $.slidea = (element, options) ->\n    ###\n    Default attribute values\n    ###\n    _defaults =\n      animation:\n        initial: \"opacity 0\" # Slide initial animation state\n        out: \"opacity 0\" # Slide default out animation\n        easing: \"easeOutQuad\" # Default animation easing\n        duration: 500 # Default animation duration\n\n      duration: 4000 # Slide duration (display time) in milliseconds\n\n      overlap: 1 # Overlap previous out and current in animations (value >= 0)\n                 # where 0 means overlap and 1 means wait for transition to finish\n\n      layout: \"default\" # Slidea layout\n\n      layerIndex: 99 # Starting z-index for layers\n\n      autoplay: true # Autoplay feature\n      loop: true # Start from first slide after reaching last\n\n      preload: 'fast' # Preload mode: 'fast' or 'all'\n\n      animate: 'TweenLite'\n\n      # content_parallax:\n      #   enabled: true # Fade content on scroll\n      #   data:\n      #     mode: 'from-middle'\n      #     transform:\n      #       translateY: 0.6 # Scroll fade translate speed coefficient\n      #       opacity: 0.4 # Scroll fade fade speed coefficient\n      #     transform_style:\n      #       opacity: 'default' # from-middle, to-middle, default\n\n      grid:           # Split slidea background into tiles\n        rows: 1       # Number of rows to split the background into\n        columns: 1    # Number of columns to split the background into\n        stagger: 0.1  # Animation delay in between tiles\n\n      # canvas_parallax:\n      #   enabled: true # Parallax scroll coefficient\n      #   data:\n      #     transform:\n      #       translateY: 0.2\n      #   layers: true # Parallax layers as well\n\n      screen: # Refers to the current screen size\n        xs: 0\n        sm: 768\n        md: 992\n        lg: 1200\n        xl: 1560\n\n      selector: # Element selectors\n        slide: \".slidea-slide\" # Should not be changed unless absolutely necessary\n        content: \".slidea-content\"\n        contentWrapper: \".slidea-content-wrapper\"\n        contentContainer: \".slidea-content-container\"\n        canvas: \".slidea-canvas\"\n        background: \".slidea-background\"\n        backgroundWrapper: \".slidea-background-wrapper\"\n        videoBackground: \".slidea-video-background\"\n        video: \".slidea-video\"\n        videoCover: \".slidea-video-cover\"\n        layer: \".slidea-layer\"\n        layerWrapper: \".slidea-layer-wrapper\"\n        object: \".slidea-object, .s-obj\"\n        objectWrapper: \".slidea-object-wrapper\"\n        next: \".slidea-next\"\n        prev: \".slidea-prev\"\n        inner: \".slidea-inner\"\n        wrapper: \".slidea-wrapper\"\n\n    # Set @options\n    @_defaults = _defaults\n    @settings = $.extend true, {}, _defaults, options\n\n    # Debugging flag\n    @debug = if @settings.debug then @settings.debug else false\n    @error_logging = if @settings.errorLogging then @settings.errorLogging else true\n\n    # Slider\n    @element = $ element\n    @parent = @element.parent()\n\n    ###\n    Current active slide. We're using -1 to say that there is no current\n    slide yet, or that the slider hasn't started yet.\n    ###\n    @current = -1\n\n    # Video Players\n    @youtube_player = {}\n    @vimeo_player = {}\n\n    # Window selector\n    @window = $(window)\n\n    # Slides loaded\n    @loaded = false\n\n    ###\n    Timer\n    Used in slide to set timeout to next slide\n    ###\n    @timer = {}\n    @timer.timeout = null\n    @timer.start = 0\n    @timer.remaining = 0\n\n    ###\n    The dynamic adding queue is required becuase images are loaded\n    asynchroneously, therefore we add the next as soon as the last one has\n    been loaded\n    ###\n    @dynamic_queue = []\n\n    ###\n    Get a random id by concatenating input string\n    with a random number\n    ###\n    @get_random_id = (string) ->\n      return string + '-' + Math.floor((Math.random() * 100000) + 1)\n\n    # Get or set slider ID\n    if @element.attr('id')?\n      @id = @element.attr 'id'\n    else\n      @id = @get_random_id 'slidea'\n      @element.attr 'id', @id\n\n    @initialize = =>\n      @log \"Initializing Slidea..\"\n      @log @settings\n\n      # Register modules and layouts\n      @register()\n\n      # Add Slidea Classes\n      @add_classes()\n\n      # Wrap Objects\n      @wrap_objects()\n\n      # Set wrapper\n      @wrapper = $ @settings.selector.wrapper, @element\n\n      # Set inner\n      @inner = $ @settings.selector.inner, @element\n\n      # Set Slides\n      @slides = $ @settings.selector.slide, @element\n\n      # Set total slide count\n      @slides_length = @slides.length\n\n      # Add wrapper and inner even if there are no slides\n      if @slides_length == 0\n        # Add wrapper\n        @element.append($('<div></div>', class: @settings.selector.wrapper.substring(1)))\n        @wrapper = $ @settings.selector.wrapper, @element\n\n        # Add inner\n        @wrapper.append($('<div></div>', class: @settings.selector.inner.substring(1)))\n        @inner = $ @settings.selector.inner, @element\n\n      # Initialize slides animation data\n      @data = {}\n      @slides.each (index) => @data[index] = {}\n\n      # Set the indexes of the relevant first slides\n      if @settings.firstSlide?\n        @first_slide = @settings.firstSlide\n      else\n        @first_slide = 0\n      @set_adjacent_slides @first_slide\n\n      # Set Active Slide\n      @active = @slides.eq @first_slide\n\n      # Set Animation Platform\n      @animate = window[@settings.animate]\n      @log \"Animating using the #{@settings.animate} platform.\"\n\n      # Initialize layouts\n      @eval.layouts 'initialize'\n\n      # Initialize modules\n      @eval.modules 'initialize'\n\n      # Animation States\n      @init_animus()\n\n      # @Settings\n      @set_data_settings()\n\n      # Set relevant object sizes\n      @set_parent_sizes()\n\n      # Get current responsive context\n      @set_responsive_context()\n\n      # Setup Layers\n      @set_layers_zindex()\n\n      # Bind Window Resize\n      @bind_resize()\n\n      # Bind Window Blur and focus\n      @bind_focus()\n\n      # Add links\n      @bind_inner_links()\n\n      # Perform Initial Load\n      @load =>\n\n        # Initial slider sizing\n        @resize()\n\n        @log \"Animation data parsed.\"\n        @log @data\n\n        # Start the slider after loader is hidden\n        setTimeout (=>\n          @slide @first_slide if @slides.length > 0\n        ), 500\n\n        @log \"Load callback has finished.\"\n        return\n      return\n\n    ###\n    Slide wrapper function for calling static slider method to move\n    the carousel to the next slide\n    ###\n    @slide = (to) ->\n      # Set current slide as \"from\" slide\n      from = @current\n\n      # Index Logic\n      if to == @current\n        return\n      if to > @slides_length - 1\n        @element.triggerHandler 'slidea.loop'\n        to = 0\n      if to < 0\n        to = @slides_length - 1\n\n      # Trigger before transition event\n      @element.triggerHandler 'slidea.beforeTransition', [\n        from\n        to\n      ]\n\n      # Check if we have existing slides\n      if @slides_length == 0\n        @error \"There are no existing slides in this slider.\"\n        return\n\n      @log \"---------------------------------------\"\n      @log \"Slide transition from #{from} to #{to}.\"\n\n      # Set adjacent next and prev slides\n      @set_adjacent_slides to\n\n      # Set Previous\n      $('.previous', @element).removeClass 'previous'\n      @slides.eq(@prev_slide).addClass 'previous'\n\n      # Set Active\n      $('.active', @element).removeClass 'active'\n      @active = @slides.eq(to)\n      @active.addClass 'active'\n\n      # Set next\n      $('.next', @element).removeClass 'next'\n      @slides.eq(@next_slide).addClass 'next'\n\n      # Clear Timeouts\n      if from != -1\n        setTimeout =>\n          @clear_timeouts from\n          return\n        , @data[from].background[0].animation[@data[from].background[0].duration].duration * 1000\n      @clear_timeouts to\n\n      # Call layouts slide call\n      @eval.layouts 'slide', [from, to]\n\n      # Call modules slide call\n      @eval.modules 'slide', [from, to]\n\n      # Slidea specific slide method\n      @transition from, to\n\n      # Set Current\n      @current = to\n      @log \"Indexes are current: #{@current}, previous: #{@prev_slide}, next: #{@next_slide}.\"\n\n      # Go to the next slide after the slide specific duration\n      if @settings.autoplay is true\n        @timer.start = new Date\n        @timer.remaining = @data[to].background[0].duration\n        clearTimeout @timer.clock\n        @timer.clock = setTimeout((=>\n          # When getting to\n\n          # Check if we need to loop\n          if @settings.loop isnt true && to + 1 == @slides_length - 1\n            @log \"Looping is off. Autoplay stops here.\"\n            @element.triggerHandler 'slidea.loop'\n            return\n\n          @slide to + 1\n          return\n        ), @timer.remaining)\n        @log \"Autoplay timer has been reset.\"\n\n      # Trigger transition event\n      @element.triggerHandler 'slidea.transition', [\n        from\n        to\n        @prev_slide\n        @next_slide\n        @slides_length\n        @active\n      ]\n      return\n\n    ###\n    Set the index of the next and previous slides\n    ###\n    @set_adjacent_slides = (to) =>\n      @next_slide = if to + 1 > @slides_length - 1 then 0 else to + 1\n      @prev_slide = if to - 1 < 0 then @slides_length - 1 else to - 1\n      return\n\n    ###\n    Apply animations for all slider elements. Run previous slide out animation\n    and set time required to crossfade slides\n\n    @param i [Fixnum] Current slide index\n    @param prev [Fixnum] Previous slide index\n    ###\n    @transition = (from, to) =>\n      # Call layouts transition call\n      @eval.layouts 'transition', [from, to]\n\n      # Call modules transition call\n      @eval.modules 'transition', [from, to]\n\n      # Staggering timeout when using grid layouts\n      from_stagger = 0\n\n      # Transition timeout, used for overlapping transitions\n      timeout = 0\n\n      # Clear main animation timeout to prevent bad behaviour for unusual\n      # request counts (click spamming)\n      clearTimeout @animate_timeout\n\n      # Run animateOut animation for previous slide\n      if from != -1\n        @transition_run from, 'out'\n\n        from_slide_duration = @data[from].background[0].duration\n        if @data[from].background[0].animation[from_slide_duration]\n          timeout += @data[from].background[0].animation[from_slide_duration].duration * 1000\n\n      # If we want the slides to play one after another, the overlap parameter\n      # should be 1, otherwise 0. Everything in between will cause partial\n      # overlapping\n      timeout *= @settings.overlap\n      timeout = 0 if timeout < 0 # For non autoplay sliders\n\n      # Runs active slide animation timeline for background, layers and objects\n      #\n      # Set a timeout to overlap, depending on slider settings\n      @animate_timeout = setTimeout =>\n        @transition_run to, 'in'\n        return\n      , timeout\n\n      # Call layouts slide call\n      @eval.layouts 'after_transition', [from, to]\n\n      # Call modules slide call\n      @eval.modules 'after_transition', [from, to]\n\n      return\n\n    ###\n    Run initial transition animations for the slide\n    ###\n    @transition_run = (index, mode) =>\n      # Set current slide variables\n      slide = @slides.eq(index)\n      canvas = $ @settings.selector.canvas, slide\n      layers = $ @settings.selector.layerWrapper, slide\n      objects = $ @settings.selector.object, slide\n\n      # Background animations\n      if @settings.layoutSettings.animate_background isnt false\n        @log \"Running animations for background.\"\n\n        @transition_animate index, slide, 'background', 0, mode, false\n\n      # Layer animations\n      layers.each (layer_index, layer) =>\n        @log \"Running animations for layer #{layer_index}.\"\n\n        @transition_animate index, $(layer), 'layer', layer_index, mode, false\n        return\n\n      # Object animation\n      objects.each (object_index, object) =>\n        @log \"Running animations for object #{object_index}.\"\n\n        @transition_animate index, $(object), 'object', object_index, mode, false\n        return\n      return\n\n\n    ###\n    Validate transition index for given animation element\n    ###\n    @transition_validate = (i, index, element, context, context_index, mode) =>\n      slide_duration = @data[i].background[0].duration\n      index = parseInt index\n\n      switch mode\n        when 'in'\n          return index != 'initial' &&                                                    # Not initial state\n            index != -1 &&                                                                # Not -1 state\n            !isNaN(index) &&                                                              # Not NaN\n            !$.isEmptyObject(@data[i][context][context_index].animation[index].state) &&  # Not empty object\n            (slide_duration == -1 or slide_duration != -1 and index < slide_duration)     # Not > slide_duration\n        when 'out'\n          return index != 'initial' &&                                                    # Not initial state\n            (index == -1 or slide_duration != -1 and index >= slide_duration) &&        # Is -1 state or > slide_duration\n            !$.isEmptyObject(@data[i][context][context_index].animation[index].state)     # Not empty object\n        else\n          return true\n\n    ###\n    Runs animation for current slide, generalized for background, layers and\n    objects\n\n    @param i [Fixnum] Slide index\n    @param $element [Object] Element on which animation is applied\n    @param context [String] Current animation cache accessor\n    @param context_index [Fixnum] Current animation cache accessor index\n    ###\n    @transition_animate = (i, element, context, context_index, mode, in_loop, callback) =>\n      # Set initial animation position for active slide\n      slide_duration = @data[i].background[0].duration\n\n      # Easy access\n      element_data = @data[i][context][context_index]\n\n      # Require animation parameter\n      return unless element_data?\n\n      # Set initial state for element\n      unless mode == 'out' || in_loop || !element_data.animation.initial?\n        @animate.set element, element_data.animation.initial.state\n        if 'callback' of element_data\n          element_data.callback.call @, element, 'initial'\n\n      # Run each background animation as long as the animation index isn't greater\n      # than the slide's preview duration\n      $.each element_data.animation, (index, animation) =>\n        if !@transition_validate(i, index, element, context, context_index, mode)\n          return\n\n\n        @log \"Running #{mode} transition[#{index}] for #{context}[#{context_index}].\"\n        @log element_data.animation[index]\n\n        # Set animation timeout\n        if mode == 'in'\n          timeout = index\n        else\n          timeout = slide_duration - parseInt(index)\n\n        # Set in loop timeout and stop if it's negative. Negative values mean\n        # that the animation is outside the loop\n        if in_loop\n          timeout = timeout - element_data.loop_diff\n          return if timeout < 0\n\n        # Set timeout for each animation, with it's state\n        element_data.animation[index].timeline = setTimeout =>\n          if element_data.callback?\n            element_data.callback.call @, element, index\n\n          if typeof element_data.animation[index].state == 'string'\n            @animate_preset element, element_data.animation[index]\n          else\n            @animate.to element,\n              element_data.animation[index].duration,\n              element_data.animation[index].state\n\n          return\n        , timeout\n        return\n\n      # If we have a loop, calculate timeout to the next animation iteration and\n      # restart animation with loop parameters\n      if element_data.loop\n        if in_loop\n          loop_timeout = element_data.loop - element_data.loop_diff\n        else\n          loop_timeout = element_data.loop\n\n        element_data.loop_timeout = setTimeout =>\n          @transition_animate i, element, context, context_index, mode, true\n          return\n        , loop_timeout\n\n      return\n\n    ###\n    Grid animation wrapper to run a callback after grid animation ends\n    ###\n    @run_grid_transition = (to, $element, context, context_index, in_loop)  =>\n      to_slide = @slides.eq(to)\n      @run_transition i, $element, context, context_index, in_loop, =>\n        $.Velocity.hook $('.slidea-background-main', to_slide), 'opacity', 1\n        $('.slidea-grid', to_slide).velocity opacity: 0, 20\n        return\n      return\n\n\n    ###\n    Run animus animation preset\n    ###\n    @animate_preset = (element, data) =>\n      @log \"Animating preset #{data}.\"\n      timeout = 0\n      $.each $.animus.presets[data.state], (index, animation) =>\n        duration = data.duration * animation[1]\n        setTimeout =>\n          @animate.to element,\n            duration,\n            $.animus.presets[data.state][index][0]\n          return\n        , timeout * 1000\n        timeout += duration\n        return\n      return\n\n    ###\n    Registers modules and layouts which are loaded\n    ###\n    @register = =>\n      # Create instances of registered layouts\n      @layouts = {}\n      $.each $.slidea.layouts, (index, value) =>\n        @layouts[index] = new value\n\n        # Add module default settings and override them with the\n        # user preferred settings\n        if @layouts[index].settings?\n          if @settings.layoutSettings?\n            @settings.layoutSettings = $.extend true, {}, @layouts[index].settings, @settings.layoutSettings\n          else\n            @settings.layoutSettings = @layouts[index].settings\n\n        @log \"Layout \\\"#{index}\\\" registered.\"\n        return\n\n      # Register modules\n      @modules = {}\n      $.each $.slidea.modules, (index, module) =>\n        # Create module instance\n        @modules[index] = new module\n\n        # Add module default settings and override them with the\n        # user preferred settings\n        if @modules[index].settings?\n          if @settings[index]?\n            if typeof(@modules[index].settings) is 'object'\n              @settings[index] = $.extend true, {}, @modules[index].settings, @settings[index]\n          else\n            @settings[index] = @modules[index].settings\n\n        @log \"Module \\\"#{index}\\\" registered.\"\n        @log @modules[index]\n        return\n\n      @log \"Settings changed after module registration.\"\n      @log @settings\n      return\n\n    ###\n    Method call wrapper for layout and modules\n    ###\n    @eval = {}\n\n    ###\n    Setup wrapper function for calling layout method\n    ###\n    @eval.layouts = (method, args) =>\n      args = [] unless args?\n\n      # Call layout method if it exists\n      if @layouts[@settings.layout]\n        if @layouts[@settings.layout][method]?\n          @layouts[@settings.layout][method].apply this, args\n      else\n        @error \"Couldn't find any valid layouts with the name \\\"#{@settings.layout}\\\".\"\n      return\n\n    ###\n    Setup wrapper function for calling modules method\n    ###\n    @eval.modules = (method, args) =>\n      args = [] unless args?\n\n      # Call module method if it exists\n      $.each @modules, (name, module) =>\n        if @settings[name]? and\n           (@settings[name].enabled == true or @settings[name] == true) and\n           @modules[name][method]?\n          @modules[name][method].apply this, args\n      return\n\n    ###\n    Get data such as height, width and animations for the slide with\n    the current index\n    ###\n    @get_slide_data = (index) =>\n      @data[index] = {} unless @data[index]\n      @data[index].background = {}\n      @data[index].layer = {}\n      @data[index].object = {}\n\n      slide = @slides.eq(index)\n      slide_background = $(@settings.selector.background, slide)\n      slide_layers = $(@settings.selector.layer, slide)\n      slide_objects = $(@settings.selector.object, slide)\n\n      # Get background data\n      slide_background.each (background_index, background) =>\n        background = $(background)\n        @data[index].background[background_index] = @get_data(\n          index, 'background', background_index, slide, @check_image(background), @settings.duration\n        )\n\n        @log \"Received data for slide #{index} -> background #{background_index}.\"\n        @log @data[index].background[background_index]\n        return\n\n      if slide_background.length == 0\n        @data[index].background[0] = @get_data(\n          index, 'background', 0, slide, null, @settings.duration\n        )\n\n      # Layer animation values based on the background transitions\n      default_duration = @data[index].background[0].duration\n      # @deprecated 2.1\n      # default_duration = @data[index].background[0].duration - (@data[index].background[0].animation[0].duration / 2)\n      # @deprecated 2.0\n      # default_start = @data[index].background[0].animation[@data[index].background[0].start].duration\n\n      # Cache layers by determining whether they are images or object layers\n      slide_layers.each (layer_index, layer) =>\n        layer = $(layer)\n        @data[index].layer[layer_index] = @get_data(\n          index, 'layer', layer_index, layer, @check_image(layer), default_duration\n        )\n\n        @log \"Received data for slide #{index} -> layer #{layer_index}.\"\n        @log @data[index].layer[layer_index]\n        return\n\n      # Cache objects by determining whether they are images or object layers\n      slide_objects.each (object_index, object) =>\n        object = $(object)\n        @data[index].object[object_index] = @get_data(\n          index, 'object', object_index, object, @check_image(object), default_duration\n        )\n\n        @log \"Received data for slide #{index} -> object #{object_index}.\"\n        @log @data[index].object[object_index]\n        return\n\n      # Get module specific data\n      @eval.modules 'get_slide_data', [\n        index\n        slide\n        slide_background\n        slide_layers\n        slide_objects\n      ]\n\n      @log \"Finished gathering data for all elements.\"\n      return\n\n    ###\n    Get element animation data based on its type\n\n    @param object [Object] Current data gathering target\n    @param image [Object] Image target from which we gather layer sizes\n    @param type [String] Target type identifier\n    @param duration [Fixnum] Element default on screen display time\n    ###\n    @get_data = (index, context, context_index, object, image, default_duration) ->\n      # String data to parse\n      string = ''\n\n      # JS Data to use for the object\n      js_data = false\n\n      # Get JS Settings object\n      slide_id = @slides.eq(index).attr 'id'\n      slide_classes = @slides.eq(index).attr 'class'\n\n      if @settings.slide?\n        slide_js_data = []\n\n        # Get slide data by index\n        if @settings.slide[index]?\n          slide_js_data.push @settings.slide[index]\n\n        # Get slide data by class\n        if slide_classes?\n          $.each slide_classes.split(' '), (index, slide_class) =>\n            if @settings.slide['.' + slide_class]?\n              slide_js_data.push @settings.slide['.' + slide_class]\n            return\n\n        # Get slide data by id\n        if slide_id? and @settings.slide['#' + slide_id]?\n          slide_js_data.push @settings.slide['#' + slide_id]\n\n        # Get JS data for current object\n        if slide_js_data.length > 0\n          object_id = object.attr 'id'\n          object_classes = object.attr 'class'\n\n          # Gather\n          identifiers = []\n          identifiers.push context_index\n          if object_classes?\n            identifiers = identifiers.concat object_classes.split(' ').map (element) -> '.' + element\n          if object_id?\n            identifiers.push '#' + object_id\n\n          $.each slide_js_data, (index, slide_js_data) =>\n            if slide_js_data[context]?\n              $.each identifiers, (index, identifier) =>\n                if slide_js_data[context]? and slide_js_data[context][identifier]?\n                  if js_data\n                    js_data = $.extend js_data, slide_js_data[context][identifier]\n                  else\n                    js_data = $.extend {}, slide_js_data[context][identifier]\n                return\n            return\n\n      # Handler stacks for animation timing\n      time_stack = []\n      current_time_stack = 0\n      animation_stack = {}\n\n      # Set Element\n      data = {}\n      data.type = context\n      data.animation = {}\n\n      # Get the sizes of the loaded image element\n      if image != null\n        image_size = @get_image_size image\n\n        data.width = image_size.width\n        data.height = image_size.height\n\n      # Get data for the layer position and size\n      if context is 'layer'\n        data.position = {}\n\n        if object.attr('data-slidea-width')?\n          data.width = parseFloat(object.attr('data-slidea-width'))\n        else if js_data and js_data.width?\n          data.width = parseFloat @delete_property js_data, 'width'\n\n        if object.attr('data-slidea-height')?\n          data.height = parseFloat(object.attr('data-slidea-height'))\n        else if js_data and js_data.height?\n          data.height = parseFloat @delete_property js_data, 'height'\n\n        # Get top or bottom offset\n        if object.attr('data-slidea-top')?\n          data.position.top = parseFloat(object.attr('data-slidea-top'))\n        else if js_data and js_data.top?\n          data.position.top = parseFloat @delete_property js_data, 'top'\n        else if object.attr('data-slidea-bottom')?\n          data.position.bottom = parseFloat(object.attr('data-slidea-bottom'))\n        else if js_data and js_data.bottom?\n          data.position.bottom = parseFloat @delete_property js_data, 'bottom'\n        else\n          data.position.top = 0\n\n        # Get left or right offset\n        if object.attr('data-slidea-left')?\n          data.position.left = parseFloat(object.attr('data-slidea-left'))\n        else if js_data and js_data.left?\n          data.position.left = parseFloat @delete_property js_data, 'left'\n        else if object.attr('data-slidea-right')?\n          data.position.right = parseFloat(object.attr('data-slidea-right'))\n        else if js_data and js_data.right?\n          data.position.right = parseFloat @delete_property js_data, 'right'\n        else\n          data.position.left = 0\n\n      # Starting time for layer animation\n      if object.attr('data-slidea-start')?\n        data.start = parseFloat(object.attr('data-slidea-start'), 10)\n      else if js_data and js_data.start?\n        data.start =  parseInt @delete_property js_data, 'start'\n      else\n        data.start =  0\n\n      # Get Initial State\n      initial_state = object.attr('data-slidea')\n      initial_state = object.attr('data-slidea-initial') unless initial_state?\n      initial_state = @delete_property js_data, 'initial' unless initial_state?\n\n      if initial_state?\n        starting_animation = initial_state\n      else if context == 'background'\n        starting_animation = @settings.animation.initial\n      else\n        starting_animation = ''\n\n      ###\n      This sets the initial state of our animated object\n      The entering animation will be set as css and will\n      transition to the default state\n      ###\n      animation_stack[data.start] = starting_animation\n      time_stack[current_time_stack++] = data.start\n\n\n      ###\n      Set animation in override to set a different beginning state\n      other than the default one\n      ###\n      if object.attr('data-slidea-in')?\n        initial_animation_override = @animus.get object.attr('data-slidea-in')\n      else if js_data and js_data.in?\n        initial_animation_override = @animus.get @delete_property(js_data, 'in')\n      else\n        initial_animation_override = false\n\n      # Get Animation Timeline\n      timeline = object.data()\n      if timeline?\n        $.each timeline, (key, value) ->\n          time = undefined\n          # Check if data key matches animation\n          if (time = key.match(/slideaAt([0-9]+)/)) != null\n            at_time = parseInt(time[1], 10)\n\n            # Set value animation at time\n            animation_stack[at_time] = value\n\n            # Add time to time stack\n            time_stack[current_time_stack++] = at_time\n          return\n\n\n      # Get animation data from JS\n      $.each js_data, (index, value) =>\n        return unless /[0-9]+/.test index\n\n        animation_stack[index] = value\n        time_stack[current_time_stack++] = index\n        return\n\n      # Set ending time as default duration or when last animation ends\n      last_time = 0\n\n      ###\n      The time stack is needed to maintain the order of\n      the object animations since JSON objects aren't ordered\n      ###\n      time_stack.sort()\n      $.each time_stack, (key, time) =>\n        data.animation[time_stack[key]] = @animus.get animation_stack[time_stack[key]]\n        if time > last_time\n          last_time = time\n        return\n\n      ###\n      For backgrounds, we allow splitting images into tiles using set rows and\n      columns.\n      ###\n      if context is 'background'\n        data.grid = @get_grid_data(object)\n\n      # Get display time\n      duration = object.attr('data-slidea-duration')\n      if !duration? and js_data and js_data.duration?\n        duration = @delete_property js_data, 'duration'\n\n      if @settings.autoplay is false\n        data.duration = -1\n      else if duration?\n        data.duration = parseFloat(duration, 10)\n      else\n        data.duration = parseFloat(default_duration, 10)\n\n      # Get Exit Animation\n      if object.attr('data-slidea-out')?\n        out_animation = object.attr('data-slidea-out')\n      else if js_data and js_data.out?\n        out_animation = @delete_property js_data, 'out'\n      else if context == 'background'\n        out_animation = @settings.animation.out\n      else\n        out_animation = ''\n\n      # Set ending animation unless we have a null string\n      if out_animation != ''\n        if context == 'background'\n          if data.duration == -1 or data.duration > last_time + data.animation[last_time].duration\n            end_time = data.duration\n          else\n            end_time = last_time + data.animation[last_time].duration\n        else\n          end_time = data.duration\n\n        data.animation[end_time] = @animus.get out_animation\n\n      ###\n      Set reset state by getting all the animation variables\n      and setting them to the default values\n      ###\n      if $.type(data.animation[data.start].state) isnt 'string'\n        # Get animation with resets, meaning besides initial values, we pass through all other\n        # data animations and set default values for them as well\n        data.animation.initial =\n          timeline: null\n          duration: 0\n          state: @animus.reset data.animation[data.start].state, data.animation\n\n        # Set initial opacity to 1\n        unless 'opacity' of data.animation.initial.state\n          data.animation.initial.state.opacity = 1\n\n        # Set initial animation as a forcefed animation, meaning we use the\n        # initial state as final state, and we override the default state,\n        # if applicable\n        data.animation[data.start].state = @animus.reset initial_animation_override.state, data.animation\n\n        # Add initial state's easing to the first animation state\n        if 'ease' of data.animation.initial.state\n          data.animation[data.start].state.ease = data.animation.initial.state.ease\n\n      # Set looping timeout\n      if object.attr('data-slidea-loop')?\n        data.loop = parseInt(last_time) + data.animation[last_time].duration * 1000\n        data.loop_diff = data.start + data.animation[data.start].duration * 1000\n      else if js_data and js_data.loop?\n        data.loop = parseInt(last_time) + data.animation[last_time].duration * 1000\n        data.loop_diff = data.start + data.animation[data.start].duration * 1000\n        @delete_property js_data, 'loop'\n      else\n        data.loop = false\n\n      # Set animation callback\n      if js_data and js_data.callback?\n        data.callback = js_data.callback\n\n      # Get module specific data\n      @eval.modules 'get_data', [\n        data,\n        index,\n        context,\n        context_index,\n        object,\n        image,\n        default_duration,\n      ]\n\n      return data\n\n    ###\n    Get grid data for the given background object\n    ###\n    @get_grid_data = (object) =>\n      grid = {}\n\n      rows = object.attr('data-slidea-grid-rows')\n      grid.rows = if rows?\n        parseInt rows, 10\n      else\n        @settings.grid.rows\n\n      columns = object.attr('data-slidea-grid-columns')\n      grid.columns = if columns?\n        parseInt columns, 10\n      else\n        @settings.grid.columns\n\n      stagger = object.attr('data-slidea-grid-stagger')\n      grid.stagger = if stagger?\n        parseInt stagger, 10\n      else\n        @settings.grid.stagger\n\n\n      if grid.columns > 1 or grid.rows > 1\n        grid.enabled = true\n        object.addClass 'slidea-grid-slide'\n\n      return grid\n\n\n    ###\n    Get the size of an image element\n    ###\n    @get_image_size = (image) =>\n      size = {}\n\n      # Get image width\n      size.width = if image[0].naturalWidth?\n                    image[0].naturalWidth\n                   else if image[0].width?\n                    image[0].width\n                   else if image.width?\n                    image.width()\n                   else\n                    'auto'\n\n      # Get image height\n      size.height = if image[0].naturalHeight?\n                      image[0].naturalHeight\n                    else if image[0].height?\n                      image[0].height\n                    else if image.height?\n                      image.height()\n                    else\n                      'auto'\n\n      return size\n\n    ###\n    Verify if the first required slides have been loaded\n    ###\n    @check_loaded = (callback) =>\n      initial = @loaded\n\n      if @slides_length == 0\n        @loaded = true\n      else if @settings.preload == 'fast'\n        @loaded = (\n          # @slides_loaded.indexOf(@prev_slide) != -1 and\n          @slides_loaded.indexOf(@first_slide) != -1 and\n          @slides_loaded.indexOf(@next_slide) != -1\n        )\n      else\n        @loaded = (@slides_loaded.length == @slides_length)\n\n\n      # Initial load callback, useful for the fast mode because we don't want to\n      # call the callback multiple times\n      if !initial and @loaded\n        @log \"Required number of slides has been loaded.\"\n\n        # Enable layouts\n        @eval.layouts 'load'\n\n        # Enable modules\n        @eval.modules 'load'\n\n        # Trigger Load event\n        @element.triggerHandler 'slidea.load'\n\n        # Apply callback\n        callback.call()\n\n      return\n\n    ###\n    Load function to imagesLoaded images and cache slide animations\n    ###\n    @load = (callback) ->\n      @slides_loaded = []\n\n      # Define slide load order as\n      # current\n      # next\n      # prev\n      @load_order = []\n      if @slides_length > 0\n        for i in [@first_slide.. @slides_length + @first_slide - 1]\n          if i > @slides_length - 1\n            @load_order.push i - @slides_length\n          else\n            @load_order.push i\n\n      # Add prev image right after next\n      @load_order.splice @load_order.indexOf(@prev_slide), 1\n      @load_order.splice 2, 0, @prev_slide\n\n      # Recursive slide preloading\n      #\n      preload = (order_index) =>\n        return if order_index > @load_order.length - 1\n        index = @load_order[order_index]\n\n        slide = @slides.eq(index)\n        slide_images = $('img', slide)\n\n        if slide_images.length == 0\n          @log \"No images to load for slide #{index}.\"\n          @get_slide_data index\n\n          # Add slide to loaded slides\n          @slides_loaded.push index\n          @check_loaded callback\n\n          preload order_index + 1\n          return\n\n        # Preload images from current slide\n        images_loaded = 0\n        slide_images.each (image_index, image) =>\n          if $(image).attr('data-slidea-src')?\n            src = $(image).attr('data-slidea-src')\n          else\n            src = $(image).attr('src')\n\n          image_loader = $(\"<img>\")\n          image_loader.attr 'src', src\n\n          # Set image sizes on load\n          image_loader.load =>\n            # Set actual src attribute to the loaded images\n            $(image).attr 'src', src\n\n            # When all images are loaded, gather slide data for current slide\n            images_loaded += 1\n            if images_loaded == slide_images.length\n              @log \"Loaded images for slide #{index}.\"\n              @get_slide_data index\n\n              # After gathering data, set the size for the current slide\n              @eval.layouts 'resize_slide', [index]\n\n              # Add slide to loaded slides\n              @slides_loaded.push index\n\n              # Call callback if slides are loaded\n              @check_loaded callback\n\n              preload order_index + 1\n            return\n          .error =>\n            images_loaded += 1\n            @error \"Image with src=\\\"#{src}\\\" failed to load.\"\n            return\n          return\n        return\n\n      # Start with first order index\n      if @slides_length == 0\n        @check_loaded callback\n      else\n        preload 0\n\n      return\n\n\n    ###\n    Checks if given element is an image and returns it,\n    otherwise it returns null\n    ###\n    @check_image = (element) =>\n      if element.is 'img'\n        return element\n      else\n        return null\n\n    ###\n    Resize the slider by setting sizes in current context\n    ###\n    @resize = =>\n      # Initialize modules\n      @eval.modules 'before_resize'\n\n      @set_responsive_context()\n      @set_parent_sizes()\n\n      # Initialize layouts\n      @eval.layouts 'resize'\n\n      # Initialize modules\n      @eval.modules 'resize'\n\n      @log \"Slider elements have been resized.\"\n      return\n\n    ###\n    Binds the slider window resize event to cache current window\n    width and height and to set the layout up\n    ###\n    @bind_resize = =>\n      @window.resize =>\n        @resize()\n\n        @element.triggerHandler 'slidea.resize', [\n          @window_width\n          @window_height\n          @current_responsive_size\n        ]\n\n        return\n\n      @log \"Bound window resize event.\"\n      return\n\n    ###\n    Binds the slider window resize event to cache current window\n    width and height and to set the layout up\n    ###\n    @bind_focus = =>\n      return unless @settings.autoplay and @settings.pauseOnBlur\n\n      @window.focus =>\n        @unpause_timer()\n        return\n\n      @window.blur =>\n        @pause_timer()\n        return\n      return\n\n    ###\n    Bind inner button links\n    ###\n    @bind_inner_links = =>\n      $('[data-slidea-href]', @element).each (index, element) =>\n        element = $(element)\n        href = element.attr 'data-slidea-href'\n\n        if /^[0-9]+/.test href\n          href = parseInt href\n        else if /^\\#[a-zA-Z\\_][a-zA-Z0-9\\_\\-]*/.test href\n          return unless $(href).hasClass 'slidea-slide'\n          href = $(href).index()\n\n        element.on 'click', =>\n          @slide href\n          return\n        return\n      return\n\n    ###\n    Set the z-index of each of the @layers\n    ###\n    @set_layers_zindex = =>\n      @log \"Setting layer z-index starting from #{@settings.layerIndex}.\"\n\n      @slides.each (si, slide) =>\n        layers = $(\".slidea-layer-wrapper\", $(slide))\n        layer_count = layers.length\n        layers.each (li, layer) =>\n          $(layer).css \"z-index\", @settings.layerIndex + layer_count - li\n          return\n        return\n      return\n\n    ###\n    Set current responsive range parameter as xs,sm,md or lg\n    ###\n    @set_responsive_context = =>\n      if @window_width >= @settings.screen.xl\n        @current_responsive_size = 'xl'\n      else if @window_width >= @settings.screen.lg\n        @current_responsive_size = 'lg'\n      else if @window_width >= @settings.screen.md\n        @current_responsive_size = 'md'\n      else if @window_width >= @settings.screen.sm\n        @current_responsive_size = 'sm'\n      else\n        @current_responsive_size = 'xs'\n\n      @log \"Responsive context is \\\"#{ @current_responsive_size }\\\".\"\n\n      return\n\n    ###\n    Sets the size of the slide relevant parents\n    ###\n    @set_parent_sizes = =>\n      # Set Size Setup\n      @window_width = @window.width()\n      @window_height = @window.height()\n\n      # @Parent Size\n      @parent_width = @parent.width()\n      @parent_height = @parent.height()\n\n      # @Wrapper Size\n      @wrapper_width = @wrapper.width()\n      @wrapper_height = @wrapper.height()\n\n      @log \"Parent size is #{@parent_width} x #{@parent_height}\"\n      @log \"Window size is #{@window_width} x #{@window_height}\"\n      @log \"Wrapper size is #{@wrapper_width} x #{@wrapper_height}\"\n\n      return\n\n    ###\n    Add the actual classes to the Slidea selector classes\n    ###\n    @add_classes = =>\n      # $(@settings.selector.slide, @element).addClass \"slidea-slide\"\n      # $(@settings.selector.content, @element).addClass \"slidea-content\"\n      # $(@settings.selector.background, @element).addClass \"slidea-background\"\n      # $(@settings.selector.videoBackground, @element).addClass \"slidea-video-background\"\n      # $(@settings.selector.video, @element).addClass \"slidea-video\"\n      # $(@settings.selector.videoCover, @element).addClass \"slidea-video-cover\"\n      # $(@settings.selector.layer, @element).addClass \"slidea-layer\"\n      # $(@settings.selector.object, @element).addClass \"slidea-object\"\n      # $(@settings.selector.next, @element).addClass \"slidea-next\"\n      # $(@settings.selector.prev, @element).addClass \"slidea-prev\"\n      # $(@settings.selector.pagination, @element).addClass \"slidea-pagination\"\n\n      @log \"Added additional classes.\"\n      return\n\n    ###\n    Wrap all the elements into slidea specific classes\n    ###\n    @wrap_objects = =>\n      # Wrap background and layers with .slidea-canvas\n      $(@settings.selector.slide, @element).each (i, slide) =>\n        $(@settings.selector.background + ', ' + @settings.selector.layer, $(slide)).wrapAll \"<div class=\\\"#{ @settings.selector.canvas.substring(1) }\\\"></div>\"\n\n      # Wrap all slides with .slidea-outer > .slidea-inner\n      .wrapAll \"<div class=\\\"#{ @settings.selector.wrapper.substring(1) }\\\"><div class=\\\"#{ @settings.selector.inner.substring(1) }\\\"></div></div>\"\n\n      # Wrap content with .slidea-content-wrapper\n      $(@settings.selector.content, @element).wrap \"<div class=\\\"#{ @settings.selector.contentWrapper.substring(1) }\\\"></div>\"\n\n      # Wrap background with .slidea-background-wrapper\n      $(@settings.selector.background, @element).wrap \"<div class=\\\"#{ @settings.selector.backgroundWrapper.substring(1) }\\\"></div>\"\n\n      # Wrap layers with .slidea-layer-wrapper\n      $(@settings.selector.layer, @element).wrap \"<div class=\\\"#{ @settings.selector.layerWrapper.substring(1) }\\\"></div>\"\n\n      # Call modules and layout method\n      @eval.layouts 'wrap_objects'\n      @eval.modules 'wrap_objects'\n      return\n\n\n    ###\n    Check if element has data-slidea-settings which override default init settings\n    ###\n    @set_data_settings = =>\n      if @element.attr(\"data-slidea\")?\n        @settings.animation.initial = @element.attr(\"data-slidea\")\n      else if @element.attr(\"data-slidea-initial\")?\n        @settings.animation.initial = @element.attr(\"data-slidea-initial\")\n      if @element.attr(\"data-slidea-in\")?\n        @settings.animation.in = @element.attr(\"data-slidea-in\")\n      if @element.attr(\"data-slidea-out\")?\n        @settings.animation.out = @element.attr(\"data-slidea-out\")\n      if @element.attr(\"data-slidea-duration\")?\n        @settings.duration = @element.attr(\"data-slidea-duration\")\n      if @element.attr(\"data-slidea-layout\")?\n        @settings.layout = @element.attr(\"data-slidea-layout\")\n\n      @log \"Gathered slider data settings.\"\n\n      return\n\n    ###\n    Set default animation parameters for Slidea animation objects\n    and create animus model\n    ###\n    @init_animus = =>\n      override =\n        duration: @settings.animation.duration\n        easing: @settings.animation.easing\n\n      # Animus\n      @animus = new $.animus(override)\n\n      @log \"Initialized animus parser.\"\n      return\n\n    ###\n    Clears all the set timeouts for the chosen slide in order to stop all\n    programmed animations.\n\n    @version 2.0 Loop timeouts must also be cleared after every slide\n    ###\n    @clear_timeouts = (i) =>\n      return unless @data[i]\n\n      if 'background' of @data[i]\n        $.each @data[i].background, (index) =>\n          $.each @data[i].background[index].animation, (animate_index) =>\n            clearTimeout @data[i].background[index].animation[animate_index].timeline\n            return\n          if 'loop_timeout' of @data[i].background[index]\n            clearTimeout @data[i].background[index].loop_timeout\n\n      if 'layer' of @data[i]\n        $.each @data[i].layer, (index) =>\n          $.each @data[i].layer[index].animation, (animate_index) =>\n            clearTimeout @data[i].layer[index].animation[animate_index].timeline\n            return\n          if 'loop_timeout' of @data[i].layer[index]\n            clearTimeout @data[i].layer[index].loop_timeout\n          return\n\n      if 'object' of @data[i]\n        $.each @data[i].object, (index) =>\n          $.each @data[i].object[index].animation, (animate_index) =>\n            clearTimeout @data[i].object[index].animation[animate_index].timeline\n            return\n          if 'loop_timeout' of @data[i].object[index]\n            clearTimeout @data[i].object[index].loop_timeout\n          return\n\n      @log \"Cleared timeouts for slide #{i}.\"\n      return\n\n\n    ###\n    Pause autoplay when mouse is over @element\n    ###\n    @pause_timer = =>\n      current_time = new Date\n      @timer.remaining = @timer.remaining - (current_time - (@timer.start))\n      clearTimeout @timer.clock\n\n      @eval.modules 'pause'\n\n      @element.triggerHandler 'slidea.pause'\n      return\n\n\n    ###\n    Unpause timer when hovering over @element\n    ###\n    @unpause_timer = =>\n      next_slide = if @current == -1 then 1 else @current + 1\n      clearTimeout @timer.clock\n\n      @timer.start = new Date\n      @timer.clock = setTimeout((=>\n        @slide next_slide\n        return\n      ), @timer.remaining)\n\n      @eval.modules 'resume'\n\n      @element.triggerHandler 'slidea.resume'\n\n      return\n\n\n    ###\n    Dynamically add a new slide\n\n    {\n      image: \"path/to/image.jpg\"\n      background: {\n        0: {\n          duration: 500\n          in: \"opacity 0, scale 3\"\n          out: \"opacity 0, scale 0\"\n        }\n      }\n    }\n    ###\n    @addSlide = (index, data, queue) =>\n      # Queue slide adding because it is asynchronous\n      queue = true unless queue == false\n      if queue\n        @dynamic_queue.push { method: 'addSlide', args: [index, data, false] }\n        return unless @dynamic_queue.length == 1\n\n      # Get index as Integer\n      index = parseInt(index)\n\n      # Unique slide id\n      if data.id\n        id = data.id\n      else\n        id = \"#\" + @get_random_id 'slidea-slide'\n\n      # Set -1 as last index\n      if index == -1\n        index = @slides_length\n\n      # Normalize index\n      if index > @slides_length\n        index = @slides_length\n      else if index < 0\n        index = 0\n\n      # Require image\n      if !data.image?\n        @error \"A background image is required to add a new slide.\"\n        @shift_dynamic_queue()\n        return\n\n      if @data[index]?\n        # Shift existing object indexes to the right\n        for i in [@slides_length - 1 .. index]\n          @data[i + 1] = @data[i]\n\n      # Initialize data for new slide\n      @data[index] = {}\n\n      # Load background image\n      image = $('<img/>', src: data.image, class: \"slidea-background\")\n      image.load =>\n        # Create the slide element\n        slide = $('<div></div>', class: \"slidea-slide slidea-slide-light\", id: id.substring(1))\n        canvas = $('<div class=\"slidea-canvas\"></div>')\n        background_wrapper = $('<div class=\"slidea-background-wrapper\"></div>')\n\n        # Build the child-parent relationship\n        background_wrapper.append image\n        canvas.append background_wrapper\n        slide.append canvas\n\n        # Add slide\n        if @slides.eq(index).length > 0\n          slide.insertBefore(@slides.eq(index))\n        else\n          slide.appendTo(@inner)\n\n        # Update the slides variable\n        @slides = $(@settings.selector.slide, @element)\n        @slides_length = @slides.length\n\n        # Process slide data attributes\n        if @settings.slide?\n          @settings.slide[id] = data\n        else\n          @settings.slide = {}\n          @settings.slide[id] = data\n\n        # Get slide data for newly added slide\n        @log \"Dynamically adding slide with #{index}.\"\n        @get_slide_data index\n        @resize()\n        @log \"Dynamic data collected for the slide with index #{index}.\"\n        @log @data[index]\n\n        # Set new current slide indicator\n        if @current >= index\n          @current += 1\n\n        slide = @slides.eq(index)\n        if @slides_length == 1\n          @slide 0\n\n        @element.triggerHandler 'slidea.addSlide', [\n          index\n          slide\n        ]\n\n        # Load next element in queue\n        @shift_dynamic_queue()\n        return\n      return\n\n\n    ###\n    Remove an existing slide\n    ###\n    @removeSlide = (index, queue) =>\n      # Queue slide adding because it is asynchronous\n      queue = true unless queue == false\n      if queue\n        @dynamic_queue.push { method: 'removeSlide', args: [index, false] }\n        return unless @dynamic_queue.length == 1\n\n      index = parseInt(index)\n\n      # Set -1 as last index\n      if index == -1 && @slides_length != 0\n        index = @slides_length - 1\n\n      # Normalize index\n      if index >= @slides_length || @slides_length == 0\n        @error \"The slide with index #{index} does not exist.\"\n        @shift_dynamic_queue()\n        return\n      else if index < 0\n        index = 0\n\n      # Shift existing object indexes to the right\n      if index != @slides_length - 1\n        for i in [index, @slides_length - 2]\n          @data[i] = @data[i + 1]\n\n      # Remove slide data\n      delete @data[@slides_length - 1]\n\n      # Remove slide\n      @slides.eq(index).remove()\n      @slides = $(@settings.selector.slide, @element)\n      @slides_length = @slides.length\n\n      # Check if current slide is the one being deleted\n      if @current == index || @slides_length == 0\n        @current = -1\n        @slide index unless @slides_length == 0\n      else if index < @current\n        @current -= 1\n\n      @element.triggerHandler 'slidea.removeSlide', [\n        index\n      ]\n\n      @log \"Removed slide with index #{index}.\"\n\n      # Load next element in queue\n      @shift_dynamic_queue()\n      return\n\n\n    ###\n    Dynamically add a new layer\n\n    {\n      id: \"#slidea-layer\"\n      image: \"path/to/image.jpg\"\n      duration: 500\n      in: \"opacity 0, scale 3\"\n      out: \"opacity 0, scale 0\"\n    }\n    ###\n    @addLayer = (index, layer_index, data, queue) =>\n      # Queue slide adding because it is asynchronous\n      queue = true unless queue == false\n      if queue\n        @dynamic_queue.push { method: 'addLayer', args: [index, layer_index, data, false] }\n        return unless @dynamic_queue.length == 1\n\n      # Get indexes as Integers\n      index = parseInt(index)\n      layer_index = parseInt(layer_index)\n\n      # Unique layer id\n      if data.id\n        id = data.id\n      else\n        id = \"#\" + @get_random_id 'slidea-layer'\n\n      # Check if slide index exists\n      unless @data[index]?\n        @error \"The slide with index #{index} does not exist.\"\n        @shift_dynamic_queue()\n        return\n\n      if @data[index].layer?\n        layer_indexes = Object.keys(@data[index].layer)\n      else\n        layer_indexes = []\n\n      # Set -1 as last index\n      if index == -1\n        index = @slides_length - 1\n      if layer_index == -1\n        layer_index = layer_indexes.length\n\n      # Normalize index\n      if layer_index > layer_indexes.length\n        layer_index = layer_indexes.length\n      else if layer_index < 0\n        layer_index = 0\n\n      if @data[index].layer[layer_index]? && layer_indexes.length > 0\n        # Shift existing object indexes to the right\n        for i in [layer_indexes.length - 1 .. layer_index + 1]\n          @data[index].layer[i + 1] = @data[index].layer[i]\n\n      # Add layer animation data\n      if @settings.slide\n        if @settings.slide[index]\n          if @settings.slide[index].layer\n            @settings.slide[index].layer[id] = data\n          else\n            @settings.slide[index].layer = {}\n            @settings.slide[index].layer[id] = data\n        else\n          @settings.slide[index] = layer: {}\n          @settings.slide[index].layer[id] = data\n      else\n        @settings.slide = {}\n        @settings.slide[index] = layer: {}\n        @settings.slide[index].layer[id] = data\n\n      # Initialize data for new slide\n      @data[index].layer[layer_index] = {}\n\n      layer_loaded = =>\n        # Create the slide element\n        layer_wrapper = $('<div class=\"slidea-layer-wrapper\"></div>')\n\n        # Build the child-parent relationship\n        if image\n          layer_wrapper.append image\n        else if data.html\n          layer_wrapper.append html_layer\n\n        canvas = $(@settings.selector.canvas, @slides.eq(index))\n        if layer_indexes.length == 0\n          canvas.prepend layer_wrapper\n        else\n          if $(@settings.selector.layerWrapper, @slides.eq(index)).eq(layer_index).length > 0\n            layer_wrapper.insertBefore $(@settings.selector.layerWrapper, @slides.eq(index)).eq(layer_index)\n          else\n            canvas.prepend layer_wrapper\n\n        # Select the layer that has been added\n        layer = $(id, @slides.eq(index))\n\n        # Reinitialize current layout\n        @log \"Dynamically adding layer with #{layer_index} to slide #{index}.\"\n        @get_slide_data index\n        @set_layers_zindex()\n        @resize()\n        @transition_animate(index, layer.parent(), 'layer', layer_index, 'in', false)\n        @log \"Dynamic data collected for the layer with index #{layer_index} from slide #{index}.\"\n        @log @data[index].layer[layer_index]\n\n        # Add layer event\n        @element.triggerHandler 'slidea.addLayer', [\n          index\n          layer_index\n          layer\n        ]\n\n        # Load next element in queue\n        @shift_dynamic_queue()\n        return\n\n      # Load background image\n      if data.image\n        image = $('<img/>', src: data.image, class: \"slidea-layer\", id: id.substring(1))\n\n        image.load =>\n          layer_loaded()\n          return\n      else\n        html_layer = $('<div></div>', class: \"slidea-layer slidea-html-layer\", id: id.substring(1)).html data.html\n        layer_loaded()\n        return\n      return\n\n\n    ###\n    Dynamically remove a layer\n    ###\n    @removeLayer = (index, layer_index, queue) =>\n      index = parseInt(index)\n      layer_index = parseInt(layer_index)\n\n      # Queue slide adding because it is asynchronous\n      queue = true unless queue == false\n      if queue\n        @dynamic_queue.push { method: 'removeLayer', args: [index, layer_index, false] }\n        return unless @dynamic_queue.length == 1\n\n      # Check if slide index exists\n      unless @data[index]?\n        @error \"The slide with index #{index} does not exist.\"\n        @shift_dynamic_queue()\n        return\n\n      if @data[index].layer?\n        layer_indexes = Object.keys(@data[index].layer)\n      else\n        layer_indexes = []\n\n      # Set -1 as last index\n      if index == -1 && @slides_length != 0\n        index = @slides_length - 1\n      if layer_index == -1\n        layer_index = layer_indexes.length\n\n      # Check if slide index exists\n      unless @data[index].layer[layer_index]? && @slides_length != 0\n        @error \"The layer with index #{layer_index} does not exist.\"\n        @shift_dynamic_queue()\n        return\n\n      if @data[index].layer[layer_index] && layer_indexes.length > 0\n        # Shift existing object indexes to the right\n        for i in [layer_index .. layer_indexes.length - 2]\n          @data[index].layer[i] = @data[index].layer[i + 1]\n\n      # Initialize data for new slide\n      delete @data[index].layer[layer_indexes.length]\n\n      $(@settings.selector.layerWrapper, @slides.eq(index)).eq(layer_index).remove()\n\n      @log \"Removed layer with index #{layer_index} from slide with index #{index}.\"\n\n      # Load next element in queue\n      @shift_dynamic_queue()\n      return\n\n    ###\n    Dynamically add a new object\n\n    {\n      id: \"#slidea-object\"\n      html: \"<h1>I love slidea</h1>\"\n      target: \".slidea-content-container\"\n      duration: 500\n      in: \"opacity 0, scale 3\"\n      out: \"opacity 0, scale 0\"\n    }\n    ###\n    @addObject = (index, data, queue) =>\n      # Queue slide adding because it is asynchronous\n      queue = true unless queue == false\n      if queue\n        @dynamic_queue.push { method: 'addObject', args: [index, data, false] }\n        return unless @dynamic_queue.length == 1\n\n      # Get index as Integer\n      index = parseInt(index)\n\n      # Get target to append to\n      if data.target instanceof jQuery\n        target = data.target\n      else if typeof data.target == 'string' || data.target instanceof String\n        target = $(data.target, @slides.eq(index))\n      else\n        target = @slides.eq(index)\n\n      # Make sure adding mode is correct\n      if [\"append\", \"prepend\", \"before\", \"after\"].indexOf(data.mode) != -1\n        mode = data.mode\n      else\n        mode = \"append\"\n\n      # Target is required\n      if target.length == 0\n        @error \"The target \\\"#{data.target}\\\" for adding an object in slide \" +\n               \"with index #{index} does not exist.\"\n        @shift_dynamic_queue()\n        return\n\n      # Unique layer id\n      if data.id\n        id = data.id\n      else\n        id = \"#\" + @get_random_id 'slidea-object'\n\n      # Check if slide index exists\n      unless @data[index]?\n        @error \"The slide with index #{index} does not exist.\"\n        @shift_dynamic_queue()\n        return\n\n      # Normalize html to be added\n      unless data.html?\n        data.html = \"\"\n\n      if @data[index].object?\n        object_indexes = Object.keys(@data[index].object)\n      else\n        object_indexes = []\n\n      # Set -1 as last index\n      if index == -1 && @slides_length != 0\n        index = @slides_length - 1\n\n      # Add layer animation data\n      if @settings.slide\n        if @settings.slide[index]\n          if @settings.slide[index].object\n            @settings.slide[index].object[id] = data\n          else\n            @settings.slide[index].object = {}\n            @settings.slide[index].object[id] = data\n        else\n          @settings.slide[index] = object: {}\n          @settings.slide[index].object[id] = data\n      else\n        @settings.slide = {}\n        @settings.slide[index] = object: {}\n        @settings.slide[index].object[id] = data\n\n      # Create the slide element\n      object_wrapper = $('<div></div>', class: \"slidea-object\", id: id.substring(1))\n      object_wrapper.html data.html\n\n      # Add object to the selected target\n      target[mode](object_wrapper)\n\n      # Select the layer that has been added\n      object = $(id, @slides.eq(index))\n\n      # Set object index after adding the new object\n      object_index = $(@settings.selector.object, @slides.eq(index)).index(object)\n\n      # Shift object indexes if needed\n      if @data[index].object[object_index]? && object_indexes.length > 0\n        # Shift existing object indexes to the right\n        for i in [object_indexes.length - 1 .. object_index + 1]\n          @data[index].object[i + 1] = @data[index].object[i]\n\n      # Start data for newly added object\n      @data[index].object[object_index] = {}\n\n      # Reinitialize current layout\n      @log \"Dynamically adding object with #{object_index} to slide #{index}.\"\n      @get_slide_data index\n      @set_layers_zindex()\n      @resize()\n      @transition_animate(index, object, 'object', object_index, 'in', false)\n      @log \"Dynamic data collected for the object with index #{object_index} from slide #{index}.\"\n      @log @data[index].object[object_index]\n\n      # Add layer event\n      @element.triggerHandler 'slidea.addObject', [\n        index\n        object_index\n        object\n      ]\n\n      # Load next element in queue\n      @shift_dynamic_queue()\n      return\n\n\n    ###\n    Dynamically remove an object\n    ###\n    @removeObject = (index, object_index) =>\n      index = parseInt(index)\n      object_index = parseInt(object_index)\n\n      # Setup the queue\n      queue = true unless queue == false\n      if queue\n        @dynamic_queue.push { method: 'removeObject', args: [index, object_index, false] }\n        return unless @dynamic_queue.length == 1\n\n      # Check if slide index exists\n      unless @data[index]?\n        @error \"The slide with index #{index} does not exist.\"\n        @shift_dynamic_queue()\n        return\n\n      if @data[index].object?\n        object_indexes = Object.keys(@data[index].object)\n      else\n        object_indexes = []\n\n      # Set -1 as last index\n      if index == -1\n        index = @slides_length - 1\n      if object_index == -1\n        object_index = object_indexes.length\n\n      # Check if slide index exists\n      unless @data[index].object[object_index]?\n        @error \"The object with index #{object_index} does not exist.\"\n        @shift_dynamic_queue()\n        return\n\n      if @data[index].object[object_index]\n        # Shift existing object indexes to the right\n        for i in [object_index .. object_indexes.length - 2]\n          @data[index].object[i] = @data[index].object[i + 1]\n\n      # Initialize data for new slide\n      delete @data[index].object[object_indexes.length]\n\n      # Remove chosen object\n      $(@settings.selector.object, @slides.eq(index)).eq(object_index).remove()\n\n      @log \"Removed object with index #{object_index} from slide with index #{index}.\"\n\n      # Load next element in queue\n      @shift_dynamic_queue()\n      return\n\n\n    ###\n    Load the next element in the add queue\n    ###\n    @shift_dynamic_queue = =>\n      @dynamic_queue.shift()\n      if @dynamic_queue.length > 0\n        this[@dynamic_queue[0].method].apply @, @dynamic_queue[0].args\n      return\n\n\n    ###\n    Helper method\n    ###\n    @next = =>\n      @slide @current + 1\n      return\n\n    ###\n    Helper method\n    ###\n    @prev = =>\n      @slide @current - 1\n      return\n\n    ###\n    Debounce helper to make resize happen every n milliseconds\n    ###\n    @debounce = (func, wait, immediate) ->\n      timeout = undefined\n      ->\n        context = this\n        args = arguments\n\n        later = ->\n          timeout = null\n          if !immediate\n            func.apply context, args\n          return\n\n        callNow = immediate and !timeout\n        clearTimeout timeout\n        timeout = setTimeout(later, wait)\n        if callNow\n          func.apply context, args\n        return\n\n    ###\n    Delete an object property and return its value\n    ###\n    @delete_property = (object, property) ->\n      temporary = object[property]\n      delete object[property]\n      return temporary\n\n    ###\n    Extend given default settings with user input\n    ###\n    @extend_settings = (id, defaults) =>\n      if @settings[id]?\n        @settings[id] = $.extend {}, defaults, @settings[id]\n      else\n        @settings[id] = defaults\n\n    ###\n    Logger snippet within Slidea\n    ###\n    @log = (item) =>\n      return unless @debug\n\n      if typeof item == 'object'\n        console.log \"[Slidea]\", item\n      else\n        console.log \"[Slidea] #{item}\"\n      return\n\n    ###\n    Error logger snippet within Slidea\n    ###\n    @error = (item) =>\n      return unless @error_logging\n\n      if typeof item == 'object'\n        console.error \"[Slidea]\", item\n      else\n        console.error \"[Slidea] #{item}\"\n      return\n\n    @initialize()\n    return\n\n  # Keeps all Slidea layout definitions to be instantiated when needed\n  $.slidea.modules = {}\n\n  # Add a new Slidea layout at runtime\n  $.slidea.register_module = (name, module) ->\n    $.slidea.modules[name] = module\n    return\n\n  # Keeps all Slidea layout definitions to be instantiated when needed\n  $.slidea.layouts = {}\n\n  # Add a new Slidea layout at runtime\n  $.slidea.register_layout = (name, layout) ->\n    $.slidea.layouts[name] = layout\n    return\n\n  ###\n  Lightweight plugin wrapper that prevents multiple instantiations.\n  ###\n  $.fn.slidea = (opts) ->\n    @each (index, element) ->\n      unless $.data element, \"slidea\"\n        $.data element, \"slidea\", new $.slidea element, opts\n\n) window.jQuery, window, document\n\n(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.contentScaling = ->\n    ###\n    Enable or disable content scaling feature\n    ###\n    @settings =\n      enabled: false # Scale content based on parent width\n      mode: 'responsive' # natural or responsive\n      factor: # Scale multiplication coefficient\n        xs: 1\n        sm: 1\n        md: 1\n        lg: 1\n        xl: 1\n\n\n    scale_content = (index) ->\n      return if index == -1\n\n      current_slide = @slides.eq(index)\n      content = $('.slidea-content', current_slide)\n\n      # Set scaling origin\n      origin_x = '0%'\n      if content.hasClass 'slidea-content-center'\n        origin_y = '50%'\n      else if content.hasClass 'slidea-content-bottom'\n        origin_y = '100%'\n      else\n        origin_y = '0%'\n\n\n      # Set reference widths\n      content_width = content.width()\n      calculated_width = @wrapper_width\n\n\n      if @settings.contentScaling.mode is 'responsive'\n        # Calculate scaling value based on current width\n        scaling_value = @settings.contentScaling.factor[@current_responsive_size]\n\n        @animate.set content,\n          scale: scaling_value\n          x:  (calculated_width - content_width * scaling_value) /2\n          transformOriginX: origin_x\n          transformOriginY: origin_y\n      else\n        # Calculate scaling width based on scaling factor\n        scaling_reference = @data[index].background[0].width\n\n        # Calculate scaling value based on current width\n        scaling_value = calculated_width / scaling_reference * @settings.contentScaling.factor[@current_responsive_size]\n\n        # Center content based on current resize value 8\n        if @settings.contentScaling.factor[@current_responsive_size] == 1\n          @animate.set content, x: 0\n        else\n          @animate.set content, x: (calculated_width * (1 - @settings.contentScaling.factor[@current_responsive_size]) / 2)\n\n        # @animate.set content, 'translateX', '-50%'\n        @animate.set content,\n          z: 0\n          transformOriginX: origin_x\n          transformOriginY: origin_y\n          scaleX: scaling_value\n          scaleY: scaling_value\n\n      @log \"Content has been scaled with #{scaling_value}.\"\n\n      return\n\n    ###\n    Scale content on window resize\n    ###\n    @slide = (from, to) ->\n      scale_content.call @, to\n      return\n\n    @resize = ->\n      scale_content.call @, @current\n      return\n    return\n\n  # Add the feature to RockSlider as a new instance\n  #\n  $.slidea.register_module 'contentScaling', $.fn.slidea.contentScaling\n\n) window.jQuery, window, document\n\n(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.controls = ->\n    ###\n    Set up slider controls\n    ###\n    @settings =\n      enabled: false # Add next / prev buttons\n      thumbnail: false # Add thumbnail to controls\n      html:\n        prev: \"&lt;\"\n        next: \"&gt;\"\n      class: \"slidea-controls-alternate\" # Additional control classes\n\n    ###\n    Set thumbnail sources for each slide\n    ###\n    set_thumbnails = ->\n      return unless @settings.controls.thumbnail\n\n      @slides.each (index, slide) =>\n        slide = $(slide)\n        background = $(@settings.selector.background, slide)\n\n        if !@data[index].thumbnail?\n          thumbnail = slide.attr('data-slidea-thumbnail')\n          if thumbnail?\n            @data[index].thumbnail = thumbnail\n          else if background.attr('data-slidea-src')?\n            @data[index].thumbnail = background.attr('data-slidea-src')\n          else\n            @data[index].thumbnail = background.attr('src')\n        return\n      return\n\n    ###\n    Slider Initialization Event\n    ###\n    @initialize = ->\n      @settings.controls.enabled = false if @slides_length == 1\n      return\n\n    ###\n    Add controls to the slider\n    ###\n    @load = ->\n      set_thumbnails.call @\n\n      html = ''\n      for control in ['next', 'prev']\n        alt = control.toLowerCase().replace /\\b[a-z]/g, (letter) ->\n          return letter.toUpperCase()\n\n        html += '<a href=\"javascript:void(0);\" class=\"slidea-control slidea-' + control + ' ' + @settings.controls.class + '\">'\n        html += '<div class=\"slidea-control-inner\">'\n        if @settings.controls.thumbnail is true\n          html += '<div class=\"slidea-control-thumbnail\">'\n          html += '<img src=\"\" alt=\"' + alt + ' Slide\" class=\"slidea-control-image\"/>'\n          html += '</div>'\n        html += '<div class=\"slidea-control-text\">'\n        html += @settings.controls.html[control]\n        html += '</div>'\n        html += '</div>'\n        html += '</a>'\n\n      # Add controls HTML\n      @wrapper.append html\n\n      # Set previous button\n      @prev_button = $(@settings.selector.prev, @element)\n      @prev_button.on 'click', =>\n        @slide @current - 1\n        return\n\n      # Set next button\n      @next_button = $(@settings.selector.next, @element)\n      @next_button.on 'click', =>\n        @slide @current + 1\n        return\n\n      # Set thumbnails\n      if @settings.controls.thumbnail is true\n        @prev_thumbnail = $('.slidea-control-image', @prev_button)\n        @next_thumbnail = $('.slidea-control-image', @next_button)\n\n      return\n\n    ###\n    Run on slide modifiers for controls\n    ###\n    @slide = (from, to) ->\n      if @settings.controls.thumbnail\n        change_thumbnails = =>\n          @prev_thumbnail.attr 'src', @data[@prev_slide].thumbnail\n          @next_thumbnail.attr 'src', @data[@next_slide].thumbnail\n          return\n\n        if not change_thumbnails_interval\n          change_thumbnails_interval = setInterval =>\n            if @prev_thumbnail and @next_thumbnail\n              change_thumbnails()\n\n              clearInterval change_thumbnails_interval\n              change_thumbnails_interval = true\n            return\n          , 750\n        else\n          change_thumbnails()\n\n        @log \"Changed control thumbnails to prev[#{from}] and next[#{to}].\"\n      return\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'controls', $.fn.slidea.controls\n\n) window.jQuery, window, document\n\n(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.keyboard = ->\n    ###\n    Enable or disable keyboard handler\n    ###\n    @settings = true\n\n    ###\n    Add keyboard bindings\n    ###\n    @load = ->\n      $(document).keydown (e) =>\n        switch e.which\n          when 37 then @slide @current - 1\n          when 39 then @slide @current + 1\n          else return\n      @log \"Bound keyboard arrows event.\"\n      return\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'keyboard', $.fn.slidea.keyboard\n\n) window.jQuery, window, document\n\n(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.loader = ->\n    ###\n    Enable or disable loader component\n    ###\n    @settings = true\n\n    ###\n    Add the loader element if it hasn't been added with HTML\n    ###\n    @initialize = ->\n      if $(\".slidea-loader-wrapper\", @element).length is 0\n        html = \"\"\n        html += '<div class=\"slidea-loader-wrapper\">'\n        html += '<div class=\"slidea-loader\">'\n        html += '<div class=\"slidea-loader-inner\">'\n        html += '<div class=\"slidea-loader-tile\"></div>'\n        html += '<div class=\"slidea-loader-tile\"></div>'\n        html += '<div class=\"slidea-loader-tile\"></div>'\n        html += '<div class=\"slidea-loader-tile\"></div>'\n        html += '<div class=\"slidea-loader-tile\"></div>'\n        html += '</div>'\n        html += '</div>'\n        # html += '<div class=\"slidea-loader-text\">'\n        # html += '<h5 class=\"slidea-loader-title font-normal\">'\n        # html += 'SLIDEA'\n        # html += '</h5>'\n        # html += '<h6 class=\"slidea-loader-subtitle font-thin\">'\n        # html += 'A Smarter Slider Plugin'\n        # html += '</h6>'\n        # html += '</div>'\n        html += '</div>'\n\n        @element.prepend html\n\n        @log \"No loader found. Added default loader.\"\n      else\n        @log \"Loader markup already exists.\"\n\n      @loader = $(\".slidea-loader-wrapper\", @element)\n      return\n\n    ###\n    When all the slider images have been loaded, hide the\n    loading spinner\n    ###\n    @load = ->\n      @animate.to @loader, 0.5,\n        opacity: 0\n        onComplete: =>\n          @loader.css display: 'none'\n          @log \"Loader element faded out.\"\n          return\n      return\n\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'loader', $.fn.slidea.loader\n\n) window.jQuery, window, document\n\n(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.mousewheel = ->\n    ###\n    Enable or disable mousewheel handler\n    ###\n    @settings = false\n\n    ###\n    Add mousewheel handler\n    @require mousewheel.js\n    ###\n    @load = ->\n      enabled = true\n      enable_timeout = 750\n\n      # Bind Mousewheel event\n      @element.mousewheel (event) =>\n        return unless enabled\n\n        # Prevent scrolling for a while\n        enabled = false\n\n        if event.deltaY == -1\n          @slide @current + 1\n        if event.deltaY == 1\n          @slide @current - 1\n        if @settings.prevent_scrolling is true\n          event.preventDefault()\n\n        # Reenable scrolling after timeout\n        setTimeout =>\n          enabled = true\n          return\n        , enable_timeout\n\n        return\n\n      @log \"Bound mousewheel event.\"\n      return\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'mousewheel', $.fn.slidea.mousewheel\n\n) window.jQuery, window, document\n\n(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.pagination = ->\n    ###\n    Set up pagination component\n    ###\n    @settings =\n      enabled: false # Add pagination\n      position: \"bottom\" # top / bottom / left / right / before / after\n      class: \"slidea-pagination-light\" # Additional pagination classes\n      items: (i) =>\n        return \"<div class=\\\"slidea-pagination-item\\\"></div>\"\n\n    ###\n    Add pagination bullets to the slider\n    ###\n    @initialize = ->\n      # Don't add pagination if we have only one slide\n      return if @slides_length == 1\n\n      position = \"slidea-pagination-#{@settings.pagination.position}\"\n\n      html = \"\"\n      html += \"<div class=\\\"slidea-pagination \" + position + \" \" + @settings.pagination.class + \"\\\">\"\n      i = 0\n      while i < @slides_length\n        html += @settings.pagination.items.call(@, i)\n        i++\n      html += \"</div>\"\n      pagination = $(html)\n\n      switch @settings.pagination.position\n        when \"before\"\n          @element.before pagination\n        when \"after\"\n          @element.after pagination\n        else\n          @element.prepend pagination\n\n      @pagination = $(\".slidea-pagination-item\", pagination)\n      @pagination.each (i, el) =>\n        pagination_bullet = $(el)\n        pagination_bullet.on \"click\", =>\n          @pagination.filter(\".active\").removeClass \"active\"\n          pagination_bullet.addClass \"active\"\n          @slide i\n          return\n        return\n      return\n\n    @slide = (from, to) ->\n      @pagination.filter('.active').removeClass 'active'\n      @pagination.eq(to).addClass 'active'\n      return\n\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'pagination', $.fn.slidea.pagination\n\n) window.jQuery, window, document\n\n(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.pauseOnHover = ->\n    ###\n    Enable or disable pause on hover feature\n    ###\n    @settings = false\n\n    ###\n    Pause the slider on mouse hover\n    ###\n    @load = ->\n      @element.on 'mouseenter', =>\n        @pause_timer()\n        return\n      @element.on 'mouseleave', =>\n        @unpause_timer()\n        return\n\n      @log \"Enabled pause on hover.\"\n      return\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'pauseOnHover', $.fn.slidea.pauseOnHover\n\n) window.jQuery, window, document\n\n(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.preventDragging = ->\n    ###\n    Enable or disable image dragging\n    ###\n    @settings = true\n\n    # Check if current screen is retina. If yes, replace images with their larger\n    # versions using the data-slidea-at2x attribute\n    #\n    @initialize = ->\n      $(\"img\", @element).on \"dragstart\", (event) =>\n        event.preventDefault()\n        return\n      return\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'preventDragging', $.fn.slidea.preventDragging\n\n) window.jQuery, window, document\n\n(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.progressBar = ->\n    ###\n    Set up progress bar element\n    ###\n    @settings =\n      enabled: false # Add progress bar\n      position: \"bottom\" # Progress bar position top / bottom\n      class: \"slidea-progress-light\" # Additional thumbnail classes\n\n    ###\n    Initialize progress bar\n    ###\n    @initialize = ->\n      @progress = loaded: false\n      return\n\n    ###\n    Add progress bar\n    ###\n    @load = ->\n      return if @progress.loaded\n\n      position = (if @settings.progress.position is \"top\" then \"slidea-progress-top\" else \"slidea-progress-bottom\")\n\n      html = \"\"\n      html += \"<div class=\\\"slidea-progress \" + position + \" \" + @settings.progress.class + \"\\\">\"\n      html += \"<div class=\\\"slidea-progress-bar\\\">\"\n      html += \"</div>\"\n      html += \"</div>\"\n      @element.prepend html\n\n      @progress.element = $(\".slidea-progress\", @element)\n      @progress.bar = $(\".slidea-progress-bar\", @element)\n\n      @progress.loaded = true\n      return\n\n    ###\n    Animate progress bar from 0% to 100%\n    ###\n    @slide = (from, to) ->\n      if @progress_animation\n        @progress_animation.kill()\n\n      @progress_animation = @animate.fromTo @progress.bar,\n        @timer.remaining / 1000,\n        { width: '0%' },\n        { width: '100%' }\n      return\n\n    @pause = ->\n      @progress_animation.pause()\n      return\n\n    @resume = ->\n      @progress_animation.resume()\n      return\n\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'progress', $.fn.slidea.progressBar\n\n) window.jQuery, window, document\n\n(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.retina = ->\n    ###\n    Enable or disable retina feature\n    ###\n    @settings = true\n\n    # Check if current screen is retina. If yes, replace images with their larger\n    # versions using the data-slidea-at2x attribute\n    #\n    @initialize = ->\n      retina = false\n      root = (exports? ? window : exports)\n      mediaQuery = '(-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-resolution: 1.5dppx)';\n\n      if root.devicePixelRatio > 1\n          retina = true\n\n      if root.matchMedia && root.matchMedia(mediaQuery).matches\n          retina = true\n\n      if retina\n        @log \"This device has a retina display.\"\n\n        $('img[data-slidea-at2x]', $slide).each (index, element) =>\n          img = $(element)\n          src = img.attr('data-slidea-src')\n          retina_src = img.attr 'data-slidea-at2x'\n\n          if retina_src == \"true\"\n            src = src.replace /(\\.[\\w\\?=]+)$/, \"@2x$1\"\n          else\n            src = retina_src\n\n          @log \"Found a Retina image with src=\\\"#{src}\\\".\"\n\n          img.attr 'data-slidea-src', src\n          return\n      else\n        @log \"This device doesn't have a Retina display.\"\n      return\n\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'retina', $.fn.slidea.retina\n\n) window.jQuery, window, document\n\n(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.scroller = ->\n    ###\n    Set up scroller component\n    ###\n    @settings =\n      enabled: false # Enable Scroller Item\n      markup: \"<span class=\\\"slidea-scroller-1\\\"></span>\" # Markup for scroller item (1 or 2)\n      position: \"center\" # Scroller position: left, center, right\n\n\n    @load = ->\n      scroller = \"<div class=\\\"slidea-scroller-wrapper slidea-scroller-\" + @settings.scroller.position + \"\\\">\"\n      scroller += @settings.scroller.markup\n      scroller += \"</div>\"\n\n      @scroller = $ scroller\n      @element.prepend @scroller\n\n      @scroller.on \"click\", =>\n        $(\"html, body\").animate scrollTop: @element.offset().top + @element.height(), 1000\n        return\n      return\n\n\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'scroller', $.fn.slidea.scroller\n\n) window.jQuery, window, document\n\n(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.thumbnails = ->\n    ###\n    Set up slider thumbnails\n    ###\n    @settings =\n      enabled: false # Add thumbnails\n      visible: # Maximum number of thumbnails on page\n        xs: 12\n        sm: 6\n        md: 6\n        lg: 5\n        xl: 5\n      position: \"bottom\" # Thumbnails position before or after\n      class: \"\" # Additional thumbnail classes\n\n    ###\n    Scroll to the nth thumbnail in the collection\n    ###\n    scroll_to_thumbnail = (to) ->\n      to = 0 if to < 0\n\n      # Calculate distance to thumbnail\n      # thumbnails may have variable sizes\n      distance = 0\n      @thumbnails.elements.each (index, item) =>\n        return false if index == to\n        if @settings.thumbnails.orientation == 'horizontal'\n          distance += $(item).width()\n        else if @settings.thumbnails.orientation == 'vertical'\n          distance += $(item).height()\n        return\n\n      # If distance required is greater than the last set of thumbnails we can\n      # see, then don't go past them\n      if @thumbnails.size - distance < @thumbnails.parent_size\n        distance = @thumbnails.size - @thumbnails.parent_size\n\n      # Set the new starting position\n      @thumbnails.starting_position = -distance\n\n      # Animate the thumbnails to the new position\n      if @settings.thumbnails.orientation == 'horizontal'\n        transform = 'translate3d(' + (-distance) + 'px, 0, 0)'\n      else if @settings.thumbnails.orientation == 'vertical'\n        transform = 'translate3d(0, ' + (-distance) + 'px, 0)'\n\n      # Animate thumbnails inner wrapper\n      @thumbnails.inner.addClass('animating').css\n        'transform': transform\n        '-o-transform': transform\n        '-ms-transform': transform\n        '-moz-transform': transform\n        '-webkit-transform': transform\n      setTimeout =>\n        @thumbnails.inner.removeClass 'animating'\n        return\n      , 700\n      return\n\n\n    ###\n    Set thumbnail sources for each slide\n    ###\n    set_thumbnails = ->\n      @slides.each (index, slide) =>\n        slide = $(slide)\n        background = $(@settings.selector.background, slide)\n\n        if !@data[index].thumbnail?\n          thumbnail = slide.attr('data-slidea-thumbnail')\n          if thumbnail?\n            @data[index].thumbnail = thumbnail\n          else if background.attr('data-slidea-src')?\n            @data[index].thumbnail = background.attr('data-slidea-src')\n          else\n            @data[index].thumbnail = background.attr('src')\n        return\n      return\n\n    ###\n    Initialize thumbnails\n    ###\n    @initialize = ->\n      @thumbnails.loaded = false\n      return\n\n    ###\n    Wrap slidea inside a thumbnails wrapper for position handling\n    ###\n    @wrap_objects = ->\n      @thumbnails = {}\n\n      # Add wrapper\n      @element.wrap \"<div class=\\\"slidea-with-thumbnails #{@settings.thumbnails.position}\\\"><div class='slidea-with-thumbnails-container'></div></div>\"\n\n      # Set new parent elements\n      @parent = @element.parent()\n      @thumbnails.parent = @parent.parent()\n      return\n\n    ###\n    Add thumbnails to the slider\n    ###\n    @load = ->\n      set_thumbnails.call @\n\n      # Set thumbnails orientation\n      if ['left', 'right'].indexOf(@settings.thumbnails.position) != -1\n        @settings.thumbnails.orientation = 'vertical'\n      else\n        @settings.thumbnails.orientation = 'horizontal'\n\n      # Get thumbnails count for the current responsive size\n      thumbs_count = @settings.thumbnails.visible[@current_responsive_size]\n\n      # Get parent sizes\n      parent_height = @wrapper_height\n      parent_width = @wrapper_width\n\n      # Set parameters for horizontal or vertical thumbnails\n      # scrolling orientation\n      if @settings.thumbnails.orientation == 'horizontal'\n        individual_size = parent_width / thumbs_count\n        inner_size = individual_size * @slides_length\n        css_param = 'width'\n      else if @settings.thumbnails.orientation == 'vertical'\n        individual_size = parent_height / thumbs_count\n        inner_size = individual_size * @slides_length\n        css_param = 'height'\n\n      # Thumbnails HTML Code\n      html = \"\"\n      html += \"<div class=\\\"slidea-thumbnails-container\\\">\"\n      html += \"<div class=\\\"slidea-thumbnails #{@settings.thumbnails.class} #{@settings.thumbnails.orientation}\\\">\"\n      html += \"<div class=\\\"slidea-thumbnails-inner\\\" style=\\\"#{css_param}: \" + inner_size + \"px;\\\">\"\n      $.each @data, (index, item) ->\n        html += \"<div class=\\\"slidea-thumbnail-wrapper\\\" style=\\\"#{css_param}: \" + individual_size + \"px;\\\">\"\n        html += \"<img class=\\\"slidea-thumbnail\\\" src=\\\"\" + item.thumbnail + \"\\\" alt=\\\"Slide \" + index + \"\\\" />\"\n        html += \"</div>\"\n      html += \"</div>\"\n      html += \"</div>\"\n      html += \"</div>\"\n\n      # Append thumbnails wrapper\n      @thumbnails.wrapper = $(html)\n      if  [\"top\", \"left\", \"right\"].indexOf(@settings.thumbnails.position) != -1\n        @element.closest('.slidea-with-thumbnails').prepend @thumbnails.wrapper\n      else if @settings.thumbnails.position is \"bottom\"\n        @element.closest('.slidea-with-thumbnails').append @thumbnails.wrapper\n      else\n        @settings.thumbnails.position.append @thumbnails.wrapper\n\n      # Set thumbnails relevant elements\n      @thumbnails.inner = $(\".slidea-thumbnails-inner\", @thumbnails.wrapper)\n      @thumbnails.elements = $(\".slidea-thumbnail-wrapper\", @thumbnails.wrapper)\n      @thumbnails.container = $('.slidea-thumbnails-container', @thumbnails.parent)\n\n      # Set thumbnails inner size and parent size\n      if @settings.thumbnails.orientation == 'horizontal'\n        @thumbnails.size = @thumbnails.inner.width()\n        @thumbnails.parent_size = @thumbnails.wrapper.width()\n      else if @settings.thumbnails.orientation == 'vertical'\n        @thumbnails.size = @thumbnails.inner.height()\n        @thumbnails.parent_size = @thumbnails.wrapper.height()\n\n      # Set thumbnails click event\n      @thumbnails.elements.each (i, el) =>\n        $thumbnail = $(el)\n        $thumbnail.on \"click\", =>\n          @thumbnails.elements.filter(\".active\").removeClass \"active\"\n          $thumbnail.addClass \"active\"\n          @slide i\n          return\n        return\n\n      # Prevent thumbnail image dragging\n      $(\"img\", @thumbnails.elements).on \"dragstart\", (event) ->\n        event.preventDefault()\n        return\n\n      # Startind direction used for animation\n      @thumbnails.starting_position = 0\n      @thumbnails.starting_direction = undefined\n\n      # Set thumbnails on touch events\n      if @settings.touch is true\n        touch_thumbnails = new Hammer @thumbnails.wrapper[0]\n\n        if @settings.thumbnails.orientation == 'horizontal'\n          pan_events = 'panleft panright'\n          touch_thumbnails.get('pan').set\n            direction: Hammer.DIRECTION_HORIZONTAL\n        else if @settings.thumbnails.orientation == 'vertical'\n          pan_events = 'panup pandown'\n          touch_thumbnails.get('pan').set\n            direction: Hammer.DIRECTION_VERTICAL\n\n\n        # Bind touch event to the thumbnails\n        touch_thumbnails.on \"panstart pancancel panend #{pan_events}\", (event) =>\n          if @settings.thumbnails.orientation == 'horizontal'\n            distance = event.deltaX\n          else if @settings.thumbnails.orientation == 'vertical'\n            distance = event.deltaY\n\n          # When moving, sync the slider with the mouse movement\n          if @settings.thumbnails.orientation == 'horizontal' and event.type is 'panleft' or event.type is 'panright'\n            if event.direction is Hammer.DIRECTION_LEFT or event.direction is Hammer.DIRECTION_RIGHT\n              transform = \"translate3d(#{@thumbnails.starting_position + distance}px, 0, 0)\"\n              @thumbnails.inner.css\n                'transform': transform\n                '-o-transform': transform\n                '-ms-transform': transform\n                '-moz-transform': transform\n                '-webkit-transform': transform\n\n          else if @settings.thumbnails.orientation == 'vertical' and event.type is 'panup' or event.type is 'pandown'\n            if event.direction is Hammer.DIRECTION_UP or event.direction is Hammer.DIRECTION_DOWN\n              transform = \"translate3d(0, #{@thumbnails.starting_position + distance}px, 0)\"\n              @thumbnails.inner.css\n                'transform': transform\n                '-o-transform': transform\n                '-ms-transform': transform\n                '-moz-transform': transform\n                '-webkit-transform': transform\n\n          # Get starting transform position\n          else if event.type is 'panstart' and !@thumbnails.inner.hasClass 'animating'\n            @thumbnails.inner.addClass 'slidea-dragging'\n\n            @thumbnails.starting_direction = event.direction\n\n          # When letting go, check if we have enough distance to go to the next slide\n          # otherwise return to the initial position\n          else if event.type is 'panend'\n            @thumbnails.inner.removeClass 'slidea-dragging'\n\n            # Set new starting position\n            @thumbnails.starting_position += distance\n\n            # Don't go past last thumbnail\n            if @thumbnails.starting_position < - @thumbnails.size + @thumbnails.parent_size\n              scroll_to_thumbnail.call @, @slides_length - 1\n\n            # Don't go past first thumbnail\n            else if @thumbnails.starting_position > 0\n              scroll_to_thumbnail.call @, 0\n\n            # Snap to current thumbnail\n            else\n              snap_distance = 0\n              @thumbnails.elements.each (index, item) =>\n                if @thumbnails.starting_position > -snap_distance\n                  scroll_to_thumbnail.call @, index\n                  return false\n\n                if @settings.thumbnails.orientation == 'horizontal'\n                  snap_distance += $(item).width()\n                else if @settings.thumbnails.orientation == 'vertical'\n                  snap_distance += $(item).height()\n\n                return\n\n          event.preventDefault()\n          return\n\n\n\n      # Resize the slider after adding thumbnails\n      image_loader = $('<img>', src: $('img', @thumbnails.elements.eq(0)).attr('src'))\n      image_loader.load =>\n        # Thumbnails are loaded\n        @thumbnails.loaded = true\n        @resize()\n        return\n\n      return\n\n\n\n    ###\n    Resize thumbnails wrapper\n    ###\n    resize_wrapper = ->\n      return unless @thumbnails.loaded\n\n      # Set thumbnails container size and set padding in case of\n      # vertical orientation\n      if @settings.thumbnails.orientation == 'horizontal'\n        thumbnail_height = $('img', @thumbnails.elements.eq(0)).height()\n        @thumbnails.container.height thumbnail_height\n      else if @settings.thumbnails.orientation == 'vertical'\n        thumbnail_width = $('img', @thumbnails.elements.eq(0)).width()\n        @parent.css \"padding-#{@settings.thumbnails.position}\": \"#{thumbnail_width}px\"\n        @thumbnails.container.width thumbnail_width\n\n      return\n\n\n    # Resize thumbnails when window resize happens\n    #\n    @resize = ->\n      return unless @thumbnails.loaded\n\n      thumbs_count = @settings.thumbnails.visible[@current_responsive_size]\n\n      # Get parent sizes\n      parent_height = @wrapper_height\n      parent_width = @wrapper_width\n\n      # Set parameters for horizontal or vertical thumbnails\n      # scrolling orientation\n      if @settings.thumbnails.orientation == 'horizontal'\n        individual_size = parent_width / thumbs_count\n        inner_size = individual_size * @slides_length\n        css_param = 'width'\n      else if @settings.thumbnails.orientation == 'vertical'\n        individual_size = parent_height / thumbs_count\n        inner_size = individual_size * @slides_length\n        css_param = 'height'\n\n      console.log @id, parent_height, individual_size, inner_size\n\n      # Set inner and thumbnails width or height\n      @thumbnails.inner[css_param] inner_size\n      @thumbnails.elements[css_param] individual_size\n\n      if @settings.thumbnails.orientation == 'horizontal'\n        @thumbnails.size = inner_size\n      else if @settings.thumbnails.orientation == 'vertical'\n        @thumbnails.size = inner_size\n\n      # Set parent size\n      @thumbnails.parent_size = @thumbnails.wrapper[css_param]()\n\n      # Scroll to current thumbnail\n      scroll_to_thumbnail.call @, @current\n\n      # Set wrapper sizes\n      resize_wrapper.call @\n      return\n\n    @slide = (from, to) ->\n      return unless @thumbnails.loaded\n\n      @thumbnails.elements.filter('.active').removeClass 'active'\n      @thumbnails.elements.eq(to).addClass 'active'\n      scroll_to_thumbnail.call @, to\n\n      @log \"Scrolled to thumbnail #{to}.\"\n      return\n\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'thumbnails', $.fn.slidea.thumbnails\n\n) window.jQuery, window, document\n\n(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.touch = ->\n    ###\n    Enable or disable video features\n    ###\n    @settings = true\n\n    ###\n    Enable touch handler for the slider.\n    @require Hammer.js\n    ###\n    @load = ->\n      # Get touch target\n      @touch_object = new Hammer @element[0]\n\n      # Allow horizontal touch only\n      @touch_object.get('pan').set\n        direction: Hammer.DIRECTION_HORIZONTAL\n\n      # Add panleft and panright events\n      @touch_object.on 'panleft panright', (event) =>\n        # Show dragging cursor on drag start\n        if event.eventType is Hammer.INPUT_START\n          @element.addClass 'slidea-dragging'\n\n        else if event.eventType is Hammer.INPUT_END or event.eventType is Hammer.INPUT_CANCEL\n          @element.removeClass 'slidea-dragging'\n\n          # Swipe left or right based on direction\n          if event.direction is Hammer.DIRECTION_LEFT\n            @slide @current + 1\n          else if event.direction is Hammer.DIRECTION_RIGHT\n            @slide @current - 1\n\n        return\n\n      @log \"Bound touch pan left and right events.\"\n      return\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'touch', $.fn.slidea.touch\n\n) window.jQuery, window, document\n\n(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.video = ->\n    ###\n    Enable or disable video features\n    ###\n    @settings = true\n\n    ###\n    Setup video events at slide start for HTML5, YouTube and Vimeo videos\n    ###\n    @initialize = ->\n      ###\n      Handle autoplay timeouts using a timeout timeline\n      ###\n      @video_timeline = {}\n\n      delay = 500\n      interval = undefined\n      i = 0\n      tries = 10\n\n      # Handle background videos\n      $('.slidea-video-background').each (index, background) ->\n        unless $(background).hasClass 'slidea-object'\n          $(background).addClass 'slidea-object'\n        return\n\n      $(\"video.slidea-video\", @element).attr \"data-slidea-video-type\", \"html5\"\n      $(\"iframe[data-slidea-src*=\\\"youtube.com\\\"].slidea-video\", @element).attr \"data-slidea-video-type\", \"youtube\"\n      $(\"iframe[data-slidea-src*=\\\"vimeo.com\\\"].slidea-video\", @element).attr \"data-slidea-video-type\", \"vimeo\"\n\n      $(@settings.selector.video, @element).each (i, el) =>\n        # Get video\n        video = $(el)\n\n        # Get volume\n        volume = video.attr(\"data-slidea-volume\")\n        volume = (if isNaN(volume) then 0 else volume)\n\n        # Get controls\n        controls = (video.attr(\"data-slidea-controls\") is \"true\")\n\n        # Pause slider on video play\n        pause_slider = (video.attr(\"data-slidea-pause-slider\") is \"true\")\n\n        # Get src\n        src = video.attr(\"data-slidea-src\")\n\n        # Get video type\n        video_type = video.attr(\"data-slidea-video-type\")\n\n        # Get video id\n        video.attr \"id\", @get_random_id(\"slidea-video\") unless video.attr(\"id\")?\n        id = video.attr(\"id\")\n\n        # HTML5\n        if video_type is \"html5\"\n          # Set volume\n          video.get(0).volume = volume\n\n          # Enable or disable controls\n          video.attr \"controls\", \"controls\"  if controls is true\n\n          # If slider is set to autoplay, pause the slider when video starts\n          if @settings.autoplay is true and pause_slider is true\n            # On video play\n            video.on \"play\", =>\n              @pause_timer()\n              return\n\n            # On video pause\n            video.on \"pause ended\", =>\n              @unpause_timer()\n              return\n\n\n        # YouTube\n        if video_type is \"youtube\"\n          video_id = undefined\n          separator = undefined\n\n          # Enable video JS API\n          if src.indexOf(\"enablejsapi=1\") is -1\n            if src.indexOf(\"?\") is -1\n              video.attr \"src\", src + \"?enablejsapi=1\"\n            else\n              video.attr \"src\", src + \"&enablejsapi=1\"\n            src = video.attr(\"src\")\n\n          # Set player API ID\n          if src.indexOf(\"playerapiid=\") is -1\n            if src.indexOf(\"?\") is -1\n              video.attr \"src\", src + \"?playerapiid=\" + id\n            else\n              video.attr \"src\", src + \"&playerapiid=\" + id\n            src = video.attr(\"src\")\n\n          # Get youtube Video ID\n          if src.indexOf(\"embed\") == \"-1\"\n            video_id = src.split(\"v=\")[1]\n            separator = video_id.indexOf(\"&\")\n            video_id = video_id.substring(0, separator)  unless separator is -1\n          else\n            video_id = src.split(\"/\")\n            video_id = video_id[video_id.length - 1]\n            separator = video_id.indexOf(\"?\")\n            video_id = video_id.substring(0, separator)  unless separator is -1\n\n\n          # Create a new YT Player using the API\n          video.load =>\n            @youtube_player[id] = new YT.Player(id,\n              height: \"720\"\n              width: \"1280\"\n              video_id: video_id\n              events:\n                onStateChange: (e) =>\n                  @pause_timer()  if e.data is 1\n                  @unpause_timer()  if e.data is 2 or e.data is 0\n                  return\n            )\n\n            # Try to set the video volume\n            i = 0\n            interval = setInterval(=>\n              i++\n              if i is tries\n                clearInterval interval\n              else if not @youtube_player[id]? or typeof @youtube_player[id].setVolume isnt \"function\"\n                return\n              else\n                clearInterval interval\n              @youtube_player[id].setVolume volume\n              return\n            , delay)\n            return\n\n        # Vimeo\n        if video_type is \"vimeo\"\n          # Enable vimeo JS API\n          if src.indexOf(\"api=1\") is -1\n            if src.indexOf(\"?\") is -1\n              video.attr \"src\", src + \"?api=1\"\n            else\n              video.attr \"src\", src + \"&api=1\"\n            src = video.attr(\"src\")\n\n          # Setup Vimeo player ID\n          if src.indexOf(\"player_id=\") is -1\n            if src.indexOf(\"?\") is -1\n              video.attr \"src\", src + \"?player_id=\" + id\n            else\n              video.attr \"src\", src + \"&player_id=\" + id\n            src = video.attr(\"src\")\n\n          # Create a new Vimeo Player API\n          video.load =>\n            @vimeo_player[id] = $f(id)\n            @vimeo_player[id].addEvent \"ready\", =>\n              video.attr \"data-slidea-ready\", \"true\"\n              @vimeo_player[id].api \"setVolume\", volume\n              if @settings.autoplay is true and pause_slider is true\n                @vimeo_player[id].addEvent \"play\", @pause_timer\n                @vimeo_player[id].addEvent \"pause\", @unpause_timer\n                @vimeo_player[id].addEvent \"finish\", @unpause_timer\n              return\n            return\n        return\n\n    ###\n    Handle video events at slide start for HTML5, YouTube and Vimeo videos\n    ###\n    @slide = (from, to) ->\n      from_slide = @slides.eq(from)\n      to_slide = @slides.eq(to)\n\n      from_videos = $(@settings.selector.video, from_slide)\n      to_videos = $(@settings.selector.video, to_slide)\n\n      # Pause or stop videos from from slide\n      if from != -1 and from_videos.length > 0\n        from_videos.each (video_index, video)=>\n          # to Video\n          video = $(video)\n\n          # Get video ID\n          id = video.attr('id')\n\n          # Get video type\n          video_type = video.attr('data-slidea-video-type')\n\n          # Check if the video resets when next slide is triggered\n          reset = video.attr('data-slidea-reset') == 'true'\n\n          # Clear the video timeout for the to video\n          clearTimeout @video_timeline[id]\n\n          # HTML5\n          if video_type == 'html5'\n            # Pause the video\n            video.get(0).pause()\n\n            # Reset the video after the slide animation has finished\n            if reset\n              setTimeout (=>\n                video.get(0).current_time = 0\n                return\n              ), @data[to].background[0].animation[0].duration\n\n          # Youtube\n          else if video_type == 'youtube'\n            # Pause the video\n            @youtube_player[id].pauseVideo()\n\n            # Reset the video after the slide animation has finished\n            if reset\n              setTimeout (=>\n                @youtube_player[id].stopVideo()\n                return\n              ), @data[to].background[0].animation[0].duration\n\n          # Vimeo\n          else if video_type == 'vimeo'\n            # Pause the video\n            @vimeo_player[id].api 'pause'\n\n            # Reset the video after the slide animation has finished\n            if reset\n              setTimeout (=>\n                @vimeo_player[id].api 'unload'\n                return\n              ), @data[to].background[0].animation[0].duration\n          return\n\n        @log \"Paused (handled) videos from slide #{from}.\"\n\n      if to_videos.length > 0\n        # Play videos from to slide\n        to_videos.each  (index, video) =>\n          # Get video\n          video = $(video)\n\n          # Get video ID\n          id = video.attr('id')\n\n          # Set try interval data\n          i = 0\n          tries = 10\n          delay = 500\n          interval = undefined\n\n          # Check if video should autoplay\n          autoplay = video.attr('data-slidea-autoplay') == 'true'\n          if video.attr('data-slidea-autoplay-time')?\n            autoplay_time = parseInt(video.attr('data-slidea-autoplay-time'), 10)\n          else\n            autoplay_time = 100\n\n          # Check if the video pauses the slider\n          pause_slider = video.attr('data-slidea-pause-slider') == 'true'\n\n          # HTML5\n          if video.attr('data-slidea-video-type') == 'html5'\n            if autoplay == true\n              # Start the video player after the set delay\n              @video_timeline[id] = setTimeout((->\n                video.get(0).play()\n                return\n              ), autoplay_time)\n\n          # Youtube\n          if video.attr('data-slidea-video-type') == 'youtube'\n            if autoplay == true\n              # Try to get the youtube player\n              i = 0\n              interval = setInterval =>\n                i++\n                if i == tries\n                  clearInterval interval\n                else if !video.attr('data-slidea-ready')? or\n                        !defined(@youtube_player[id]) or\n                        typeof @youtube_player[id].playVideo != 'function'\n                  return\n                else\n                  clearInterval interval\n\n                # Start the video player after the set delay\n                @video_timeline[id] = setTimeout =>\n                  @youtube_player[id].playVideo()\n                  return\n                , autoplay_time\n                return\n              , delay\n\n          # Vimeo\n          if video.attr('data-slidea-video-type') == 'vimeo'\n            if autoplay == true\n              # Try to get the vimeo player\n              i = 0\n              interval = setInterval =>\n                i++\n                if i == tries\n                  clearInterval interval\n                else if !video.attr('data-slidea-ready')? or\n                        typeof @vimeo_player[id].api != 'function'\n                  return\n                else\n                  clearInterval interval\n\n                # Start the video player after the set delay\n                @video_timeline[id] = setTimeout =>\n                  Froogaloop(id).api 'play'\n                  return\n                , autoplay_time\n                return\n              , delay\n          return\n\n        @log \"Played (handled) videos from slide #{to}.\"\n      return\n\n    @resize = ->\n      @slides.each (i, element) =>\n        slide = $ element\n        # Fit slidea videos to their containers\n        $(@settings.selector.video, @element).each (i, video)=>\n          video = $(video)\n          parent = video.parent()\n\n          if parent.is('.slidea-video-background')\n            return\n\n          height = parent.height()\n          width = parent.width()\n\n          video.css\n            width: width\n            height: height\n\n          return\n\n        # Set slide to have a full screen Video Background\n        video_background = $('.slidea-video-background', slide)\n        if video_background.length > 0\n          video = $('.video', video_background)\n\n          data_width = parseInt(video.attr('data-slidea-width'))\n          data_height = parseInt(video.attr('data-slidea-height'))\n\n          video_width = @slider_width\n          video_height = video_width * data_height / data_width\n\n          margin_left = -(video_width - (@slider_width)) / 2\n          margin_top = -(video_height - (@slider_height)) / 2\n\n          video.css\n            'width': video_width\n            'height': video_height\n            'margin-left': margin_left\n            'margin-top': margin_top\n        return\n      return\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'video', $.fn.slidea.video\n\n) window.jQuery, window, document\n\n(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.videoCover = ->\n    ###\n    Enable or disable video cover features\n    ###\n    @settings = true \n\n    ###\n    Set up the video covers so that they fade out and play the\n    actual video on click event\n    ###\n    @load = ->\n      hide = (cover) =>\n        @animate.to cover, 0.5,\n          opacity: 0\n          onComplete: =>\n            cover.css display: 'none'\n            return\n        return\n\n      covers = $(@settings.selector.videoCover, @element)\n      covers.each (i, el) =>\n        cover = $(el)\n        parent = cover.parent()\n        video = $(@settings.selector.video, parent)\n        type = video.attr 'data-slidea-video-type'\n        id = video.attr(\"id\")\n        switch type\n          when \"html5\"\n            cover.on \"click\", =>\n              video.get(0).play()\n              hide cover\n              return\n\n          when \"youtube\"\n            cover.on \"click\", =>\n              @youtube_player[id].playVideo()\n              hide cover\n              return\n\n          when \"vimeo\"\n            cover.on \"click\", =>\n              @vimeo_player[id].api \"play\"\n              hide cover\n              return\n\n        return\n      @log \"Added video cover events.\" if covers.length > 0\n      return\n\n    ###\n    Animate progress bar from 0% to 100%\n    ###\n    @slide = (from, to) ->\n      slide = @slides.eq(to)\n      covers = $(@settings.selector.videoCover, slide)\n      covers.each (i, el) =>\n        cover = $(el)\n        cover.css display: 'block'\n        @animate.to cover, 0.5, opacity: 1\n        return\n      return\n    return\n\n  # Add the feature to Slidea as a new instance\n  #\n  $.slidea.register_module 'videoCover', $.fn.slidea.videoCover\n\n) window.jQuery, window, document\n\n\n# Default Slidea layouts\n#\n###\n\n         dP oo       dP\n         88          88\n.d8888b. 88 dP .d888b88 .d8888b. .d8888b.\nY8ooooo. 88 88 88'  `88 88ooood8 88'  `88\n      88 88 88 88.  .88 88.  ... 88.  .88\n`88888P' dP dP `88888P8 `88888P' `88888P8\noooooooooooooooooooooooooooooooooooooooooo\n\n@plugin    jQuery\n@license   CodeCanyon Standard / Extended\n@author    Alex Grozav\n@company   Pixevil\n@website   http://pixevil.com\n@email     alex@grozav.com\n###\n\n(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.contentLayout = ->\n    # Extend layout settings\n    @settings =\n      anchor: 'center'\n      defaultHeight: 400 # Height when content div doesn't exist\n\n    ###\n    Get Parent sizes\n    ###\n    # set_parent_size = ->\n      # @parent_width = @parent.width()\n      # @parent_height = @wind\n\n    ###\n    Resize slider to showcase the given slide\n    ###\n    resize_slider = (slide) ->\n      # Reset current slide index if slider hasn't started\n      if slide is -1\n        slide = @first_slide\n\n      return unless @data[slide] && @data[slide].background?\n\n      # Set content height for current slide\n      if $(@settings.selector.content, @slides.eq(slide)).length > 0\n        content_height = $(@settings.selector.content, @slides.eq(slide)).height()\n      else\n        content_height = @settings.layoutSettings.defaultHeight\n\n      # Set size for the current slide\n      current_slide_image_width = @data[slide].background[0].width\n      current_slide_image_height = @data[slide].background[0].height\n\n      # Slider Size\n      @slider_width = @parent_width\n      @slider_height = content_height\n\n      # Set overvflow wrapper size\n      @wrapper_width = @slider_width\n      @wrapper_height = @slider_height\n      @wrapper.css\n        height: @wrapper_height\n        width: @wrapper_width\n\n      # Set inner wrapper size\n      @inner.width @slider_width\n      @inner.height @slider_height\n\n      @log \"Slider size set to #{@slider_width} x #{@slider_height}\"\n      return\n\n    ###\n    Resize the slide with the given index\n    ###\n    resize_slide = (index) ->\n      return unless @data[index] && @data[index].background?\n\n      slide = @slides.eq(index)\n\n      # Set content height for current slide\n      if $(@settings.selector.content, slide).length > 0\n        content_height = $(@settings.selector.content, slide).height()\n      else\n        content_height = @settings.layoutSettings.defaultHeight\n\n      # Set slide images width\n      slide_image_width = @data[index].background[0].width\n      slide_image_height = @data[index].background[0].height\n\n      # Set slider visible width and height, meaning area which is inside the\n      # container, overflowing on the screen\n      slide_width = @slider_width\n      slide_height = content_height\n\n      # Set actual background height\n      background_width = slide_width\n      background_height = slide_width / slide_image_width * slide_image_height\n\n      if slide_height > background_height\n        background_width = slide_height / slide_image_height * slide_image_width\n        background_height = slide_height\n\n      $(@settings.selector.contentWrapper, @element).css\n        width: slide_width\n        height: slide_height\n\n      # Slide Layers\n      width_ratio = slide_width / slide_image_width\n      height_ratio = slide_height / slide_image_height\n\n      # Margins for centering the images\n      switch @settings.layoutSettings.anchor\n        when 'center'\n          margin_left = -(background_width - slide_width) / 2\n          margin_top = -(background_height - slide_height) / 2\n        when 'top'\n          margin_left = -(background_width - slide_width) / 2\n          margin_top = 0\n        when 'bottom'\n          margin_left = -(background_width - slide_width) / 2\n          margin_top = -(background_height - slide_height)\n        when 'left'\n          margin_left = 0\n          margin_top = -(background_height - slide_height)\n        when 'right'\n          margin_left = -(background_width - slide_width)\n          margin_top = -(background_height - slide_height) / 2\n        when 'top-left'\n          margin_left = 0\n          margin_top = 0\n        when 'bottom-left'\n          margin_left = 0\n          margin_top = -(background_height - slide_height)\n        when 'top-right'\n          margin_left = -(background_width - slide_width)\n          margin_top = 0\n        when 'bottom-right'\n          margin_left = -(background_width - slide_width)\n          margin_top = -(background_height - slide_height)\n\n      margin_left = 0 if margin_left > 0\n      margin_top = 0 if margin_top > 0\n\n      # Set background wrapper sizes\n      #\n      $(@settings.selector.backgroundWrapper, slide).css\n        width: background_width\n        height: background_height\n        'margin-top': margin_top\n        'margin-left': margin_left\n\n      # Get top, right, bottom and left position of the slide layers\n      slide_layers = $(@settings.selector.layerWrapper, slide)\n      slide_layers.each (layer_index, layer) =>\n        layer_css = {}\n\n        if 'top' of @data[index].layer[layer_index].position\n          layer_css.top = height_ratio * @data[index].layer[layer_index].position.top + margin_top\n        else if 'bottom' of @data[index].layer[layer_index].position\n          layer_css.bottom = height_ratio * @data[index].layer[layer_index].position.bottom - margin_top\n\n        if 'left' of @data[index].layer[layer_index].position\n          layer_css.left = width_ratio * @data[index].layer[layer_index].position.left + margin_left\n        else if 'right' of @data[index].layer[layer_index].position\n          layer_css.right = width_ratio * @data[index].layer[layer_index].position.right - margin_left\n\n        if 'width' of @data[index].layer[layer_index]\n          layer_css.width = width_ratio * @data[index].layer[layer_index].width\n        if 'height' of @data[index].layer[layer_index]\n          layer_css.height = height_ratio * @data[index].layer[layer_index].height\n\n        $(layer).css layer_css\n        return\n      return\n\n    ###\n    Initialize the @parameters\n    ###\n    @initialize = ->\n      # Add Classes\n      @element.addClass 'slidea-content-layout'\n\n      return\n\n    ###\n    Set up the slider and each of the slides\n    ###\n    @resize = ->\n      unless @data?\n        return\n\n      resize_slider.apply @, [@current]\n\n      # Compute visible background image size and set margins to center the image\n      @slides.each (index, slide) =>\n        resize_slide.apply @, [index]\n        return\n      return\n\n    # Display the slide element with index i and program the animation logic for\n    # each background, layer and object\n    #\n    # Previous slide needs to be set in order to preview the out animation so that\n    # we can create a transition between every slide\n    #\n    # The layers and objects need to be stopped and reanimated in order to prevent\n    # animation flaws.\n    #\n    # Layer and object animation will transition from an inverted\n    # animation state to a default state to provide normal slider behaviour\n    #\n    @slide = (from, to) ->\n      resize_slider.apply @, [to]\n      resize_slide.apply @, [to]\n      return\n    return\n\n  # Add the layer to Slidea as a new instance\n  #\n  $.slidea.register_layout 'content', $.fn.slidea.contentLayout\n  return\n\n) jQuery, window, document\n\n###\n\n         dP oo       dP\n         88          88\n.d8888b. 88 dP .d888b88 .d8888b. .d8888b.\nY8ooooo. 88 88 88'  `88 88ooood8 88'  `88\n      88 88 88 88.  .88 88.  ... 88.  .88\n`88888P' dP dP `88888P8 `88888P' `88888P8\noooooooooooooooooooooooooooooooooooooooooo\n\n@plugin    jQuery\n@license   CodeCanyon Standard / Extended\n@author    Alex Grozav\n@company   Pixevil\n@website   http://pixevil.com\n@email     alex@grozav.com\n###\n\n(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.defaultLayout = ->\n    ###\n    Resize slider to showcase the given slide\n    ###\n    resize_slider = (slide) ->\n      # Reset current slide index if slider hasn't started\n      if slide is -1\n        slide = @first_slide\n\n      return unless @data[slide] && @data[slide].background?\n\n      # Set size for the current slide\n      current_slide_image_width = @data[slide].background[0].width\n      current_slide_image_height = @data[slide].background[0].height\n\n      # Slider Size\n      @slider_width = @parent_width\n      @slider_height = @parent_width / current_slide_image_width * current_slide_image_height\n\n      # Set overvflow wrapper size\n      @wrapper.css\n        height: @slider_height\n        width: @slider_width\n\n      # Set inner wrapper size\n      @inner.width @slider_width\n      @inner.height @slider_height\n\n      @log \"Slider size set to #{@slider_width} x #{@slider_height}\"\n      return\n\n    ###\n    Resize the slide with the given index\n    ###\n    resize_slide = (index) ->\n      return unless @data[index] && @data[index].background?\n\n      slide = @slides.eq(index)\n\n      # Set slide images width\n      slide_image_width = @data[index].background[0].width\n      slide_image_height = @data[index].background[0].height\n\n      # Set slider visible width and height, meaning area which is inside the\n      # container, overflowing on the screen\n      slide_width = @slider_width\n      slide_height = slide_width / slide_image_width * slide_image_height\n\n      # Slide Layers\n      width_ratio = slide_width / slide_image_width\n      height_ratio = slide_height / slide_image_height\n\n      # Get top, right, bottom and left position of the slide layers\n      slide_layers = $(@settings.selector.layerWrapper, slide)\n      slide_layers.each (layer_index, layer) =>\n        layer_css = {}\n\n        if 'top' of @data[index].layer[layer_index].position\n          layer_css.top = height_ratio * @data[index].layer[layer_index].position.top\n        else if 'bottom' of @data[index].layer[layer_index].position\n          layer_css.bottom = height_ratio * @data[index].layer[layer_index].position.bottom\n\n        if 'left' of @data[index].layer[layer_index].position\n          layer_css.left = width_ratio * @data[index].layer[layer_index].position.left\n        else if 'right' of @data[index].layer[layer_index].position\n          layer_css.right = width_ratio * @data[index].layer[layer_index].position.right\n\n        if 'width' of @data[index].layer[layer_index]\n          layer_css.width = width_ratio * @data[index].layer[layer_index].width\n        if 'height' of @data[index].layer[layer_index]\n          layer_css.height = height_ratio * @data[index].layer[layer_index].height\n\n        $(layer).css layer_css\n        return\n      return\n\n    ###\n    Initialize slider layout\n    ###\n    @initialize = ->\n      # Add Classes\n      @element.addClass 'slidea-default-layout'\n      return\n\n    ###\n    Resize slide with given index\n    ###\n    @resize_slide = (index)->\n      resize_slide.apply @, [index]\n      return\n\n    ###\n    Set up the slider and each of the slides\n    ###\n    @resize = ->\n      unless @data?\n        return\n\n      resize_slider.apply @, [@current]\n\n      # Compute visible background image size and set margins to center the image\n      @slides.each (index, slide) =>\n        resize_slide.apply @, [index]\n        return\n      return\n\n    ###\n    Display the slide element with index i and program the animation logic for\n    each background, layer and object\n\n    Previous slide needs to be set in order to preview the out animation so that\n    we can create a transition between every slide\n\n    The layers and objects need to be stopped and reanimated in order to prevent\n    animation flaws.\n\n    Layer and object animation will transition from an inverted\n    animation state to a default state to provide normal slider behaviour\n    ###\n    @slide = (from, to) ->\n      resize_slider.apply @, [to]\n      resize_slide.apply @, [to]\n      return\n    return\n\n  ###\n  Add the layer to Slidea as a new instance\n  ###\n  $.slidea.register_layout 'default', $.fn.slidea.defaultLayout\n  return\n\n) jQuery, window, document\n\n###\n\n         dP oo       dP\n         88          88\n.d8888b. 88 dP .d888b88 .d8888b. .d8888b.\nY8ooooo. 88 88 88'  `88 88ooood8 88'  `88\n      88 88 88 88.  .88 88.  ... 88.  .88\n`88888P' dP dP `88888P8 `88888P' `88888P8\noooooooooooooooooooooooooooooooooooooooooo\n\n@plugin    jQuery\n@license   CodeCanyon Standard / Extended\n@author    Alex Grozav\n@company   Pixevil\n@website   http://pixevil.com\n@email     alex@grozav.com\n###\n\n(($, window, document) ->\n  \"use strict\"\n\n  $.fn.slidea.fluidLayout = ->\n    # Extend layout settings\n    @settings =\n      anchor: 'center'\n      size: 'fullscreen'\n\n    ###\n    Get Parent sizes\n    ###\n    set_parent_size = ->\n      if @settings.layoutSettings.size == 'fullscreen'\n        @parent_width = @window_width\n        @parent_height = @window_height\n      else if @settings.layoutSettings.size == 'screenHeight'\n        @parent_height = @window_height\n      else if @settings.layoutSettings.size == 'screenWidth'\n        @parent_width = @window_width\n\n    ###\n    Resize slider to showcase the given slide\n    ###\n    resize_slider = (slide) ->\n      # Reset current slide index if slider hasn't started\n      if slide is -1\n        slide = @first_slide\n\n      return unless @data[slide] && @data[slide].background?\n\n      # Set size for the current slide\n      current_slide_image_width = @data[slide].background[0].width\n      current_slide_image_height = @data[slide].background[0].height\n\n      # Get parent size\n      set_parent_size.call @\n\n      # Slider Size\n      @slider_width = @parent_width\n      @slider_height = @parent_width / current_slide_image_width * current_slide_image_height\n\n      if @parent_height > @slider_height\n        @slider_width = @parent_height / current_slide_image_height * current_slide_image_width\n        @slider_height = @parent_height\n\n      # Set overvflow wrapper size\n      @wrapper_width = @parent_width\n      @wrapper_height = @parent_height\n      @wrapper.css\n        height: @wrapper_height\n        width: @wrapper_width\n\n\n      # Set inner wrapper size\n      @inner.width @slider_width\n      @inner.height @slider_height\n\n      @log \"Slider size set to #{@slider_width} x #{@slider_height}\"\n      return\n\n    ###\n    Resize the slide with the given index\n    ###\n    resize_slide = (index) ->\n      return unless @data[index] && @data[index].background?\n\n      slide = @slides.eq(index)\n\n      # Get parent size\n      set_parent_size.call @\n\n      # Set slide images width\n      slide_image_width = @data[index].background[0].width\n      slide_image_height = @data[index].background[0].height\n\n      # Set slider visible width and height, meaning area which is inside the\n      # container, overflowing on the screen\n      slide_width = @slider_width\n      slide_height = slide_width / slide_image_width * slide_image_height\n\n      $(@settings.selector.contentWrapper, @element).css\n        height: @parent_height\n        width: @parent_width\n\n      # Slide Layers\n      width_ratio = slide_width / slide_image_width\n      height_ratio = slide_height / slide_image_height\n\n      # Margins for centering the images\n      switch @settings.layoutSettings.anchor\n        when 'center'\n          margin_left = -(@slider_width - (@parent_width)) / 2\n          margin_top = -(@slider_height - (@parent_height)) / 2\n        when 'top'\n          margin_left = -(@slider_width - (@parent_width)) / 2\n          margin_top = 0\n        when 'bottom'\n          margin_left = -(@slider_width - (@parent_width)) / 2\n          margin_top = -(@slider_height - (@parent_height))\n        when 'left'\n          margin_left = 0\n          margin_top = -(@slider_height - (@parent_height))\n        when 'right'\n          margin_left = -(@slider_width - (@parent_width))\n          margin_top = -(@slider_height - (@parent_height)) / 2\n        when 'top-left'\n          margin_left = 0\n          margin_top = 0\n        when 'bottom-left'\n          margin_left = 0\n          margin_top = -(@slider_height - (@parent_height))\n        when 'top-right'\n          margin_left = -(@slider_width - (@parent_width))\n          margin_top = 0\n        when 'bottom-right'\n          margin_left = -(@slider_width - (@parent_width))\n          margin_top = -(@slider_height - (@parent_height))\n\n      margin_left = 0 if margin_left > 0\n      margin_top = 0 if margin_top > 0\n\n      $(@settings.selector.backgroundWrapper, slide).css\n        'margin-top': margin_top\n        'margin-left': margin_left\n\n      # Get top, right, bottom and left position of the slide layers\n      slide_layers = $(@settings.selector.layerWrapper, slide)\n      slide_layers.each (layer_index, layer) =>\n        layer_css = {}\n\n        if 'top' of @data[index].layer[layer_index].position\n          layer_css.top = height_ratio * @data[index].layer[layer_index].position.top + margin_top\n        else if 'bottom' of @data[index].layer[layer_index].position\n          layer_css.bottom = height_ratio * @data[index].layer[layer_index].position.bottom - margin_top\n\n        if 'left' of @data[index].layer[layer_index].position\n          layer_css.left = width_ratio * @data[index].layer[layer_index].position.left + margin_left\n        else if 'right' of @data[index].layer[layer_index].position\n          layer_css.right = width_ratio * @data[index].layer[layer_index].position.right - margin_left\n\n        if 'width' of @data[index].layer[layer_index]\n          layer_css.width = width_ratio * @data[index].layer[layer_index].width\n        if 'height' of @data[index].layer[layer_index]\n          layer_css.height = height_ratio * @data[index].layer[layer_index].height\n\n        $(layer).css layer_css\n        return\n      return\n\n    ###\n    Initialize the @parameters\n    ###\n    @initialize = ->\n      # Add Classes\n      @element.addClass 'slidea-fluid-layout'\n\n      return\n\n    ###\n    Set up the slider and each of the slides\n    ###\n    @resize = ->\n      unless @data?\n        return\n\n      resize_slider.apply @, [@current]\n\n      # Compute visible background image size and set margins to center the image\n      @slides.each (index, slide) =>\n        resize_slide.apply @, [index]\n        return\n      return\n\n    # Display the slide element with index i and program the animation logic for\n    # each background, layer and object\n    #\n    # Previous slide needs to be set in order to preview the out animation so that\n    # we can create a transition between every slide\n    #\n    # The layers and objects need to be stopped and reanimated in order to prevent\n    # animation flaws.\n    #\n    # Layer and object animation will transition from an inverted\n    # animation state to a default state to provide normal slider behaviour\n    #\n    @slide = (from, to) ->\n      resize_slider.apply @, [to]\n      resize_slide.apply @, [to]\n      return\n    return\n\n  # Add the layer to Slidea as a new instance\n  #\n  $.slidea.register_layout 'fluid', $.fn.slidea.fluidLayout\n  return\n\n) jQuery, window, document\n\n\n# A factory that uses AMD, CommonJS or window globals to\n# create the jQuery plugin.\n# do (plugin = slidea, window) ->\n#   hasDefine  = typeof define is \"function\" and define.amd?\n#   hasExports = typeof module isnt \"undefined\" and module.exports?\n#\n#   # AMD.\n#   if hasDefine\n#     define [\"jquery\"], plugin\n#\n#   # NodeJS/CommonJS.\n#   else if hasExports\n#     module.exports = plugin require \"jquery\"\n#\n#   # Window globals.\n#   else\n#     plugin window.jQuery or window.$\n"]}
