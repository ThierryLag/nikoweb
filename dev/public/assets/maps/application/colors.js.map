{"version":3,"sources":["application/colors.coffee"],"names":[],"mappings":"AAAA;EAAA,MAAO,CAAA,aAAA,CAAP,GAAwB,SAAC,GAAD,EAAM,KAAN;AACpB,QAAA;IAAA,MAAA,GAAS,2CAA2C,CAAC,IAA5C,CAAiD,GAAjD;IACT,IAAiB,aAAjB;MAAA,KAAA,GAAQ,EAAR;;IAEA,GAAA,GACE;MAAA,CAAA,EAAG,QAAA,CAAS,MAAO,CAAA,CAAA,CAAhB,EAAoB,EAApB,CAAH;MACA,CAAA,EAAG,QAAA,CAAS,MAAO,CAAA,CAAA,CAAhB,EAAoB,EAApB,CADH;MAEA,CAAA,EAAG,QAAA,CAAS,MAAO,CAAA,CAAA,CAAhB,EAAoB,EAApB,CAFH;;AAIF,WAAO,OAAA,GAAQ,GAAG,CAAC,CAAZ,GAAc,IAAd,GAAkB,GAAG,CAAC,CAAtB,GAAwB,IAAxB,GAA4B,GAAG,CAAC,CAAhC,GAAkC,IAAlC,GAAsC,KAAtC,GAA4C;EAT/B;;EAWxB,MAAO,CAAA,QAAA,CAAP,GACE;IAAA,OAAA,EAAS,SAAT;IACA,SAAA,EAAW,SADX;IAEA,IAAA,EAAM,SAFN;IAGA,IAAA,EAAM,SAHN;IAIA,IAAA,EAAM,SAJN;IAKA,IAAA,EAAM,SALN;IAMA,KAAA,EAAO,SANP;IAOA,KAAA,EAAO,SAPP;IAQA,IAAA,EAAM,SARN;IASA,MAAA,EAAQ,SATR;IAUA,MAAA,EAAQ,SAVR;IAWA,GAAA,EAAK,SAXL;IAYA,OAAA,EAAS,SAZT;IAaA,MAAA,EAAQ,SAbR;IAcA,MAAA,EAAQ,SAdR;IAeA,KAAA,EAAO,SAfP;IAgBA,MAAA,EAAQ,SAhBR;IAiBA,UAAA,EAAY,SAjBZ;IAkBA,IAAA,EAAM,SAlBN;IAmBA,SAAA,EAAW,SAnBX;IAoBA,QAAA,EAAU,SApBV;IAqBA,OAAA,EAAS,SArBT;IAsBA,KAAA,EAAO,SAtBP;;;EAwBF,MAAO,CAAA,QAAA,CAAU,CAAA,OAAA,CAAjB,GACE;IAAA,OAAA,EAAS,WAAA,CAAY,MAAO,CAAA,OAAA,CAAnB,EAA6B,KAA7B,CAAT;IACA,KAAA,EAAO,WAAA,CAAY,MAAO,CAAA,OAAA,CAAnB,EAA6B,IAA7B,CADP;IAEA,MAAA,EAAQ,WAAA,CAAY,MAAO,CAAA,OAAA,CAAnB,EAA6B,GAA7B,CAFR;IAGA,IAAA,EAAM,WAAA,CAAY,MAAO,CAAA,OAAA,CAAnB,EAA6B,IAA7B,CAHN;IAIA,MAAA,EAAQ,WAAA,CAAY,MAAO,CAAA,OAAA,CAAnB,EAA6B,KAA7B,CAJR;;;EAMF,MAAO,CAAA,QAAA,CAAU,CAAA,MAAA,CAAjB,GACE;IAAA,OAAA,EAAS,WAAA,CAAY,MAAO,CAAA,OAAA,CAAnB,EAA6B,KAA7B,CAAT;IACA,KAAA,EAAO,WAAA,CAAY,MAAO,CAAA,OAAA,CAAnB,EAA6B,IAA7B,CADP;IAEA,MAAA,EAAQ,WAAA,CAAY,MAAO,CAAA,OAAA,CAAnB,EAA6B,GAA7B,CAFR;IAGA,IAAA,EAAM,WAAA,CAAY,MAAO,CAAA,OAAA,CAAnB,EAA6B,IAA7B,CAHN;IAIA,MAAA,EAAQ,WAAA,CAAY,MAAO,CAAA,OAAA,CAAnB,EAA6B,KAA7B,CAJR;;AA5CF","file":"../../coffee/application/colors.js","sourcesContent":["window['hex_to_rgba'] = (hex, alpha) ->\n    result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    alpha = 1 unless alpha?\n\n    rgb =\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n\n    return \"rgba(#{rgb.r}, #{rgb.g}, #{rgb.b}, #{alpha})\"\n\nwindow['colors'] =\n  primary: '#C04848'\n  secondary: '#480048'\n  aqua: '#7fdfff'\n  blue: '#0074d9'\n  navy: '#001f3f'\n  teal: '#39cccc'\n  green: '#2ecc40'\n  olive: '#3d9970'\n  lime: '#01ff70'\n  yellow: '#ffdc00'\n  orange: '#ff851b'\n  red: '#ff4136'\n  fuchsia: '#f012be'\n  purple: '#b10dc9'\n  maroon: '#85144b'\n  white: '#ffffff'\n  silver: '#f2f2f2'\n  darksilver: '#d1d1d1'\n  gray: '#aaaaaa'\n  lightgray: '#cccccc'\n  concrete: '#1d1d1e'\n  asphalt: '#3b3b3b'\n  black: '#111111'\n\nwindow['colors']['light'] =\n  lighter: hex_to_rgba(colors['white'], 0.125)\n  light: hex_to_rgba(colors['white'], 0.25)\n  medium: hex_to_rgba(colors['white'], 0.5)\n  dark: hex_to_rgba(colors['white'], 0.75)\n  darker: hex_to_rgba(colors['white'], 0.825)\n\nwindow['colors']['dark'] =\n  lighter: hex_to_rgba(colors['black'], 0.125)\n  light: hex_to_rgba(colors['black'], 0.25)\n  medium: hex_to_rgba(colors['black'], 0.5)\n  dark: hex_to_rgba(colors['black'], 0.75)\n  darker: hex_to_rgba(colors['black'], 0.825)\n"]}
