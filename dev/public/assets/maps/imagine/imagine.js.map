{"version":3,"sources":["imagine/imagine.coffee"],"names":[],"mappings":"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","file":"../../coffee/imagine/imagine.js","sourcesContent":["###\noo                              oo\n\ndP 88d8b.d8b. .d8888b. .d8888b. dP 88d888b. .d8888b.\n88 88'`88'`88 88'  `88 88'  `88 88 88'  `88 88ooood8\n88 88  88  88 88.  .88 88.  .88 88 88    88 88.  ...\ndP dP  dP  dP `88888P8 `8888P88 dP dP    dP `88888P'\noooooooooooooooooooooooo~~~~.88~ooooooooooooooooooooo\n                        d8888P\n\nA smart and efficient parallax plugin by Alex Grozav\nfrom Pixevil built to make the web a better place.\n\n@plugin  \tImagine\n@author \tAlex Grozav\n@website  http://pixevil.com\n@version \t1.0\n@license \tCommercial\n###\n\n(($, window, document) ->\n  \"use strict\"\n\n  _defaults =\n    animation: \"y\"\n    animate: 'TweenLite'\n\n    optimize: true\n    initialAnimationDuration: 1\n\n    orientation: 'vertical'\n    factor: 0.5\n\n    screen: # Refers to the current screen size\n      xs: 0\n      sm: 768\n      md: 992\n      lg: 1200\n      xl: 1560\n\n    perspective: 800\n    perspectiveOrigin: \"50% 50%\"\n\n    preload: true\n    preloader: '<div class=\"imagine-loader\"><div class=\"imagine-loader-inner\"></div></div>'\n\n\n    normalizeTop: true # Normalize elements which start from lower than middle\n\n    # Background related settings\n    overflow: false\n    anchor: 'center'\n    size: 'auto' # fullscreen or auto\n\n    scroller: $(window)\n\n    # Selectors\n    selector:\n      layer: '.imagine-layer'\n      background: '.imagine-background'\n\n  $.imagine = (element, options) ->\n    # Update settings\n    @_defaults = _defaults\n    @settings = $.extend true, {}, @_defaults, options\n\n    # Set element and relevant relatives\n    @element = $(element)\n    @layers = $(@settings.selector.layer, @element)\n    @background = $(@settings.selector.background, @element)\n\n    # Set size sources\n    @source = if @settings.source then @settings.source else @element\n    @parent = if @settings.parent then @settings.parent else @element.parent()\n    @window = @settings.scroller\n\n    # Do not animate element if we have a background\n    if @background.length > 0 && not @settings.animateElement\n      @settings.animateElement = false\n    else\n      @settings.animateElement = true\n\n    # Debug mode\n    @debug = false\n\n    # Setup size cache\n    @size =\n      window: {}\n      source: {}\n      parent: {}\n      element: {}\n      background: {}\n      layer: []\n\n    # Setup position cache\n    @position =\n      window: {}\n      source: {}\n      element: {}\n      parent: {}\n\n    # Initially animate all elements\n    @loaded = false\n\n    ###\n    Initialize imagine and gather all the data\n    ###\n    @initialize = =>\n      # Set element id\n      @set_element_id()\n      @set_animator()\n      @set_orientation @settings.orientation\n      @set_layer_index()\n\n      # Initialize animus parser\n      @init_animus()\n\n      # Set size and animation data\n      @set_data()\n\n      # Add required element classes and apply them\n      @set_classes()\n\n      # If needed, load the image element then callback to set element sizes\n      # and bindings\n      @load =>\n        # Update size and position caches\n        @set_size()\n        @set_position()\n\n        # Set current responsive contexts\n        @set_responsive_context()\n\n        # Bind window events\n        @bind_resize()\n        @bind_scroll()\n\n\n        # Finish initial animation load\n        @scroll()\n        @loaded = true\n\n        # Trigger load event\n        @element.triggerHandler 'imagine.load', [@element]\n\n        @log \"Imagine has been initialized.\"\n        return\n      return\n\n    ###\n    Parallax images and content\n\n    @param position [Fixnum] Current scrolling position\n    ###\n    @parallax = =>\n      # Set offset from middle of the element\n      # delta[middle] = 0\n      delta = @position.window[@param.middle] - @position.source[@param.middle]\n\n      # Scroll progress 0.0 -> 1.0\n      # reference starting point / reference height\n      progress = (@position.window[@param.end] - @position.source[@param.start]) / @size.source.spanning\n      delta_progress = delta / @size.source.spanning\n\n      # Normalize scroll for elements at beginning of scrollable area\n      if @position.source.beginning\n        delta_difference = (@size.window.half - @position.source[@param.middle])\n        progress_difference = delta_difference / @size.source.spanning\n\n        delta -= delta_difference\n        progress -= progress_difference\n        delta_progress -= progress_difference\n\n      # Only parallax until the middle point or start from the middle point\n      # if set as mode\n      to_middle = delta <= 0\n      from_middle = delta >= 0\n\n      unless @loaded\n        to_middle = false\n        from_middle = false\n\n        if not @in_view\n          delta = 0\n          progress = 0\n          delta_progress = 0\n\n      # Current animation to run\n      $.each @animation, (index, animatable) =>\n        animation = {}\n        animation_target = animatable[0]\n        animation_data = animatable[1][@current_responsive_size]\n\n        # Process each animation state\n        $.each animation_data.state, (key, value) =>\n          # Scroll animation with star * values\n          if animation_data.state[key][0] != '*'\n            normalization = animation_data.state[key][0]\n            mode = animation_data.state[key][1]\n\n            delta_normalized = delta * normalization\n            progress_normalized = progress * normalization\n            delta_progress_normalized = delta_progress * normalization\n\n            return if ( mode == \"to-middle\" && from_middle ||\n                        mode == \"from-middle\" && to_middle ) &&\n                        key != 'opacity'\n\n            switch(key)\n              when 'opacity'\n                if mode == \"from-middle\"\n                  animation[key] = 1 - delta_progress_normalized * 2\n                  animation[key] = 1 if animation[key] > 1\n                else if mode == \"to-middle\"\n                  animation[key] = 1 + delta_progress_normalized * 2\n                  animation[key] = 1 if animation[key] > 1\n                else\n                  animation[key] = 1 - Math.abs delta_progress_normalized * 2\n\n              when 'scale', 'scaleX', 'scaleY', 'scaleZ'\n                if mode == \"up\"\n                  animation[key] = 1 + progress_normalized\n                else if mode == \"down\"\n                  animation[key] = 1 + 0.5 * normalization - progress_normalized\n                else\n                  animation[key] = 1 + delta_progress_normalized\n\n              when 'rotation', 'rotationX', 'rotationY', 'rotationZ'\n                animation[key] = (180 * (progress - 0.5)) * normalization\n\n              when 'skewX', 'skewY', 'skewZ'\n                animation[key] = (180 * (progress - 0.5)) * normalization\n\n              when 'x', 'y'\n                if @background.length > 0\n                  if @size.source.same[@param.size] && key == @param.axis\n                    # Inner scroll progress 0.0 -> 1.0\n                    # reference starting point / reference height\n                    progress_inner = {}\n                    progress_inner[@param.start] =  (@position.window[@param.start] - @position.source[@param.start]) / (@size.source[@param.size])\n                    progress_inner[@param.end] =  (@position.window[@param.end] - @position.source[@param.end]) / (@size.source[@param.size])\n                    progress_inner.value = 0\n\n                    if progress_inner[@param.start] < 0\n                      progress_inner[@param.start] = 0\n                    else\n                      progress_inner.value = progress_inner[@param.start]\n\n                    if progress_inner[@param.end] > 0\n                      progress_inner[@param.end] = 0\n                    else\n                      progress_inner.value = progress_inner[@param.end]\n\n                    animation[key] = progress_inner.value * @size.source[@param.size] * normalization\n                  else\n                    difference_normalized = @size.source.difference * (1 + normalization)\n\n                    current_base = @position.element[@param.start] - delta_normalized - difference_normalized\n                    current_peak = current_base + @size.element[@param.size]\n\n                    unless current_base > @position.source[@param.start] &&\n                           current_peak < @position.source[@param.end]\n                      animation[key] = delta_normalized\n                else\n                  animation[key] = delta_normalized\n\n              else\n                animation[key] = delta_normalized\n\n          # Scroll animation with fixed target value\n          else\n            mode = animation_data.state[key][3]\n            if mode == 'to-middle' || mode == 'from-middle'\n              middle_normalization = 2\n            else\n              middle_normalization = 1\n\n            # Total range from 'from' to 'to'\n            total_range = Math.abs(value[1]) + Math.abs(value[2])\n\n            # From - Range * Progress\n            if mode == \"to-middle\" && from_middle\n              return\n            else if mode == \"from-middle\"\n              if to_middle\n                animation[key] = value[1]\n              else\n                animation[key] = value[1] - total_range * (progress - 0.5) * middle_normalization\n            else\n              range_progress_normalized = total_range * progress * middle_normalization\n\n              if value[1] > value[2]\n                animation[key] = value[1] - range_progress_normalized\n              else\n                animation[key] = value[1] + range_progress_normalized\n            return\n          return\n\n        # Add onComplete callback to stop ticking\n        animation.onComplete = @stop_ticking\n\n        # If loaded, set the animation parameters, otherwise render initial animation\n        if @loaded\n          @animate.set animation_target, animation\n        else\n          @animate.to animation_target, @settings.initialAnimationDuration, animation\n        return\n\n      @element.triggerHandler 'imagine.parallax', [progress, delta, delta_progress]\n      return\n\n\n    ###\n    Load element\n    ###\n    @load = (callback) =>\n      loadables = @background.add @layers.filter('img')\n\n      if loadables.length > 0\n        loaded = 0\n\n        # Create preloader\n        if @settings.preloader\n          preloader = $(@settings.preloader)\n          @background.before preloader\n\n        # Check loaded wrapper\n        #\n        check_loaded = =>\n          # Check if everything is loaded\n          loaded += 1\n          if loaded == loadables.length\n            # Hide preloader once image is loaded\n            if @settings.preloader\n              @animate.to preloader, 1,\n                scale: 2\n                opacity: 0\n                onComplete: =>\n                  preloader.remove()\n                  return\n\n            callback.call()\n          return\n\n        # Load each loadable\n        loadables.each (index, loadable) =>\n          image = $(loadable)\n\n          # Get the image source\n          if image.attr('data-imagine-src')?\n            src = image.attr('data-imagine-src')\n          else\n            src = image.attr('src')\n\n          # Prepare image loader dummy\n          image_loader = $(\"<img>\")\n          image_loader.attr 'src', src\n\n          # Trigger load events on loadables\n          image_loader.on 'load', =>\n            # Set actual src attribute to the loaded images\n            image.attr 'src', src\n\n            check_loaded()\n            return\n          .on 'error', =>\n            @error \"Image with src=\\\"#{src}\\\" failed to load.\"\n\n            check_loaded()\n            return\n          return\n      else\n        callback.call()\n\n      return\n\n    ###\n    Set default animation parameters for Imagine animation objects\n    and create animus model\n    ###\n    @init_animus = =>\n      override =\n        duration: @settings.animation.duration\n        easing: @settings.animation.easing\n\n      # Animus\n      @animus = new $.animus(override)\n\n      @log \"Initialized animus parser.\"\n      return\n\n\n    ###\n    Get individual element animation data\n    ###\n    @set_data = =>\n      @animation = []\n\n      # Parent element animation data\n      if @settings.animateElement\n        @animation.push [@element, @get_animation_data('element', @element)]\n\n      # Background animation data\n      if @background.length > 0\n        @animation.push [@background, @get_animation_data('background', @background)]\n        @size['background'] = @get_size_data('background', @background)\n\n      # Layer animation data\n      if @layers.length > 0\n        @animation['layer'] = []\n        @layers.each (index, layer) =>\n          layer = $(layer)\n          @animation.push [layer, @get_animation_data('layer', layer, index)]\n          @size['layer'].push @get_size_data('layer', layer, index)\n          return\n\n      @log \"Imagine data has been processed.\"\n      @log @animation\n      return\n\n    ###\n    Initialize element animation data\n    ###\n    @get_animation_data = (context, element, index) =>\n      animation = {}\n      animation_default = \"\"\n      animation_object = null\n\n      # Set id and class for js_data matching\n      if element.attr('id')?\n        element_id = '#' + element.attr('id')\n      else\n        element_id = \"\"\n      if element.attr('class')?\n        element_class = element.attr('class').split(' ').map (item) => \".\" + item\n      else\n        element_class = []\n\n      # Set default scrolling animation\n      if element.attr('data-imagine')?\n        animation_default = element.attr('data-imagine')\n\n      # animation: \"y 0.5\"\n      else if typeof @settings.animation == 'string'\n        animation_default = @settings.animation\n\n      # animation: { .. }\n      else if typeof @settings.animation == 'object'\n        # animation: { background: \"y 0.5\" }\n        if typeof @settings.animation[context] == 'string'\n          animation_default = @settings.animation[context]\n\n        # animation: { layer: [..] }\n        else if $.isArray @settings.animation[context]\n          # animation: { layer: [\"y 0.5\"] }\n          if typeof @settings.animation[context][index] == 'string'\n            animation_default = @settings.animation[context][index]\n\n          # animation: { layer: [{..}] }\n          else if typeof @settings.animation[context][index] == 'object'\n            animation_object = @settings.animation[context][index]\n\n            # animation: { layer: [{'*': 0.5}] }\n            if typeof @settings.animation[context][index]['*'] == 'string'\n              animation_default = @settings.animation[context]['*']\n\n        # animation: { background: { .. } }\n        else if typeof @settings.animation[context] == 'object'\n          animation_object = @settings.animation[context]\n\n          # animation: { background: { '*': \"y 0.5\" } }\n          if typeof @settings.animation[context]['*'] == 'string'\n            animation_default = @settings.animation[context]['*']\n          else if typeof @settings.animation[context][element_id] == 'string'\n            animation_default = @settings.animation[context][element_id]\n          else if typeof @settings.animation[context][element_id] == 'object'\n            animation_object = @settings.animation[context][element_id]\n          else\n            $.each element_class, (index, _class) =>\n              if typeof @settings.animation[context][_class] == 'string'\n                animation_default = @settings.animation[context][_class]\n              if typeof @settings.animation[context][_class] == 'object'\n                animation_object = @settings.animation[context][_class]\n              return\n\n        # animation: { \"*\": 0.5 }\n        else if typeof @settings.animation['*'] == 'string'\n          animation_default = @settings.animation['*']\n        else\n          animation_default = \"\"\n\n      # Get animations for each responsive mode\n      $.each Object.keys(@settings.screen), (responsive_mode_index, responsive_mode) =>\n        # Initialize animation for current responsive mode\n        animation[responsive_mode] = {}\n\n        # Buffer for current responsive animation\n        responsive_animation = {}\n        if animation_object\n          if typeof animation_object[responsive_mode] == 'string'\n            responsive_animation = animation_object[responsive_mode]\n          else\n            responsive_animation =  animation_default\n        else\n          responsive_animation = animation_default\n\n        # Process each value with Animus\n        animation[responsive_mode] = @animus.get responsive_animation\n\n        # Process scroll states to have both scaling factor and\n        # transformation mode\n        for transform, value of animation[responsive_mode].state\n          value = \"\" + value\n\n          if value.indexOf(\"..\") == -1\n            scroll_transform = value.split(/\\s+/)\n\n            # []\n            if scroll_transform.length == 0\n              scroll_transform.push @settings.factor\n\n            # [..]\n            else if scroll_transform.length == 1\n              # [\"\"]\n              if scroll_transform[0] == \"\"\n                scroll_transform[1] = \"default\"\n                scroll_transform[0] = @settings.factor\n\n              # [\"default\"]\n              if isNaN(scroll_transform[0])\n                scroll_transform[1] = scroll_transform[0]\n                scroll_transform[0] = @settings.factor\n\n              # [\"0.5 default\"]\n              else\n                scroll_transform[1] = \"default\"\n                scroll_transform[0] = parseFloat scroll_transform[0]\n\n            animation[responsive_mode].state[transform] = scroll_transform\n          else\n            scroll_transform = ['*']\n            value = value.split(/[\\. ]+/)\n\n            scroll_transform[1] = parseFloat value[0]\n            scroll_transform[2] = parseFloat value[1]\n            if value.length == 2\n              scroll_transform[3] = \"default\"\n            else\n              scroll_transform[3] = value[2]\n\n            animation[responsive_mode].state[transform] = scroll_transform\n\n        return\n\n      return animation\n\n\n    ###\n    Initialize element size data\n\n    canvas: {\n      background: {\n        width: 1100,\n        height: 500\n      },\n      layer: [\n        {\n          width: 500,\n          height: 600,\n          top: 500,\n          left: 500\n        }\n      ]\n    }\n    ###\n    @get_size_data = (context, object, index) =>\n      data = {}\n\n      # Set id and class for js_data matching\n      if object.attr('id')?\n        element_id = '#' + object.attr('id')\n      else\n        element_id = \"\"\n      if object.attr('class')?\n        element_class = object.attr('class').split(' ').map (item) => \".\" + item\n      else\n        element_class = []\n\n      js_data = false\n      if @settings.canvas? && @settings.canvas[context]?\n        if index?\n          if @settings.canvas[context][index]?\n            js_data = @settings.canvas[context][index]\n          else if @settings.canvas[context][id]?\n            js_data = @settings.canvas[context][id]\n          else\n            $.each element_class, (index, _class) =>\n              if @settings.canvas[context][_class]?\n                js_data = @settings.canvas[context][_class]\n              return\n        else\n          js_data = @settings.canvas[context]\n\n      if object.attr('data-imagine-width')?\n        data.width = parseFloat(object.attr('data-imagine-width'))\n      else if js_data and js_data.width?\n        data.width = parseFloat @delete_property js_data, 'width'\n\n      if object.attr('data-imagine-height')?\n        data.height = parseFloat(object.attr('data-imagine-height'))\n      else if js_data and js_data.height?\n        data.height = parseFloat @delete_property js_data, 'height'\n\n      if context == 'layer'\n        data.position = {}\n\n        # Get top or bottom offset\n        if object.attr('data-imagine-top')?\n          data.position.top = parseFloat(object.attr('data-imagine-top'))\n        else if js_data and js_data.top?\n          data.position.top = parseFloat @delete_property js_data, 'top'\n        else if object.attr('data-imagine-bottom')?\n          data.position.bottom = parseFloat(object.attr('data-imagine-bottom'))\n        else if js_data and js_data.bottom?\n          data.position.bottom = parseFloat @delete_property js_data, 'bottom'\n        else\n          data.position.top = 0\n\n        # Get left or right offset\n        if object.attr('data-imagine-left')?\n          data.position.left = parseFloat(object.attr('data-imagine-left'))\n        else if js_data and js_data.left?\n          data.position.left = parseFloat @delete_property js_data, 'left'\n        else if object.attr('data-imagine-right')?\n          data.position.right = parseFloat(object.attr('data-imagine-right'))\n        else if js_data and js_data.right?\n          data.position.right = parseFloat @delete_property js_data, 'right'\n        else\n          data.position.left = 0\n      return data\n\n    ###\n    Set element and parent sizes\n    ###\n    @set_size = =>\n      # Set window size\n      @size.window.width = @window.width()\n      @size.window.height = @window.height()\n      @size.window.halfWidth = @size.window.width / 2\n      @size.window.halfHeight = @size.window.height / 2\n\n      # Set parent size\n      @size.parent.width = @parent.outerWidth(true)\n      @size.parent.height = @parent.outerHeight(true)\n\n      # Set source size\n      if @settings.size == 'fullscreen'\n        @source.css\n          width: @size.window.width\n          height: @size.window.height\n          'max-width': @size.window.width\n          'max-height': @size.window.height\n      else if @settings.size == 'screenHeight'\n        @source.height @size.window.height\n      else if @settings.size == 'screenWidth'\n        @source.width @size.window.width\n      @size.source.width = @source.outerWidth(true)\n      @size.source.height = @source.outerHeight(true)\n\n      ###\n      Set the size for the element, based on whether it is used as background or\n      as a normal element on the site.\n      ###\n      if @background.length > 0\n        @size.background = $.extend @get_image_size(@background), @size.background\n\n        @size.element.width = @size.source.width\n        @size.element.height = @size.source.width / @size.background.width * @size.background.height\n\n        if @size.source.height > @size.element.height\n          @size.element.width = @size.source.height / @size.background.height * @size.background.width\n          @size.element.height = @size.source.height\n\n        if @loaded\n          @animate.set @background,\n            height: @size.element.height\n            width: @size.element.width\n        else\n          @animate.to @background, @settings.initialAnimationDuration,\n            height: @size.element.height\n            width: @size.element.width\n      else\n        @size.element.width = @element.outerWidth(true)\n        @size.element.height = @element.outerHeight(true)\n\n      if @layers.length > 0\n        @layers.each (index, layer) =>\n          @size.layer[index] = $.extend @get_image_size($(layer)), @size.layer[index]\n          return\n\n      @size.source.same =\n        width: (@size.source.width == @size.element.width)\n        height: (@size.source.height == @size.element.height)\n\n      # Ratio between element size and window size\n      @size.source.ratio = @size.window[@param.size] / @size.source[@param.size]\n      # Median difference between window size and source size\n      @size.source.difference = @size.window[@param.size] - @size.source[@param.size]\n      # Window size and source size together\n      @size.source.spanning = @size.window[@param.size] + @size.source[@param.size]\n\n      @log \"Element sizes have been set.\"\n      return\n    @setSize = @set_size\n\n    ###\n    Set element top and bottom positioning on the page\n    ###\n    @set_position = =>\n      # Source offsets\n      @position.source.top = @source.offset().top\n      @position.source.bottom = @position.source.top + @size.source.height\n      @position.source.vmiddle = (@position.source.top + @position.source.bottom) / 2\n      @position.source.left = @source.offset().left\n      @position.source.right = @position.source.left + @size.source.width\n      @position.source.hmiddle = (@position.source.left + @position.source.right) / 2\n\n      @position.element.top = @element.offset().top\n      @position.element.bottom = @position.element.top + @size.element.height\n      @position.element.left = @element.offset().left\n      @position.element.right = @position.element.left + @size.element.width\n      @position.background = @position.element if @background.length > 0\n\n      # Parent offsets\n      @position.parent.top = @parent.offset().top\n      @position.parent.bottom = @position.parent.top + @size.parent.height\n      @position.parent.left = @parent.offset().left\n      @position.parent.right = @position.parent.left + @size.parent.width\n\n      # Check if element position is above the middle fold\n      if @settings.normalizeTop &&\n         @position.source[@param.start] < @size.window[@param.size] / 2 &&\n         @size.source[@param.size] < @size.window[@param.size]\n        @position.source.beginning = true\n      else\n        @position.source.beginning = false\n\n      # Element offsets\n      @set_canvas_position() if @background.length > 0 || @layers.length > 0\n\n      @log \"Element positions have been set.\"\n      return\n    @setPosition = @set_position\n\n    ###\n    Position background according to anchor settings\n    ###\n    @set_canvas_position = =>\n      # Margins for centering the images\n      switch @settings.anchor\n        when 'center'\n          margin_left = -(@size.element.width - (@size.source.width)) / 2\n          margin_top = -(@size.element.height - (@size.source.height)) / 2\n        when 'top'\n          margin_left = -(@size.element.width - (@size.source.width)) / 2\n          margin_top = 0\n        when 'bottom'\n          margin_left = -(@size.element.width - (@size.source.width)) / 2\n          margin_top = -(@size.element.height - (@size.source.height))\n        when 'left'\n          margin_left = 0\n          margin_top = -(@size.element.height - (@size.source.height))\n        when 'right'\n          margin_left = -(@size.element.width - (@size.source.width))\n          margin_top = -(@size.element.height - (@size.source.height)) / 2\n        when 'top-left'\n          margin_left = 0\n          margin_top = 0\n        when 'bottom-left'\n          margin_left = 0\n          margin_top = -(@size.element.height - (@size.source.height))\n        when 'top-right'\n          margin_left = -(@size.element.width - (@size.source.width))\n          margin_top = 0\n        when 'bottom-right'\n          margin_left = -(@size.element.width - (@size.source.width))\n          margin_top = -(@size.element.height - (@size.source.height))\n\n      margin_left = 0 if margin_left > 0\n      margin_top = 0 if margin_top > 0\n\n      if @loaded\n        @animate.set @background,\n          'margin-top': margin_top\n          'margin-left': margin_left\n      else\n        @animate.to @background, @settings.initialAnimationDuration,\n          'margin-top': margin_top\n          'margin-left': margin_left\n\n      width_ratio = @size.element.width / @size.background.width\n      height_ratio = @size.element.height / @size.background.height\n\n      # Set layer sizes based on background size\n      @layers.each (index, layer) =>\n        layer = $(layer)\n        layer_css = {}\n\n        if 'top' of @size.layer[index].position\n          layer_css.top = height_ratio * @size.layer[index].position.top + margin_top\n        else if 'bottom' of @size.layer[index].position\n          layer_css.bottom = height_ratio * @size.layer[index].position.bottom + margin_top\n\n        if 'left' of @size.layer[index].position\n          layer_css.left = width_ratio * @size.layer[index].position.left + margin_left\n        else if 'right' of @size.layer[index].position\n          layer_css.right = width_ratio * @size.layer[index].position.right + margin_left\n\n        if 'width' of @size.layer[index]\n          layer_css.width = width_ratio * @size.layer[index].width\n        if 'height' of @size.layer[index]\n          layer_css.height = height_ratio * @size.layer[index].height\n\n        if @loaded\n          @animate.set layer, layer_css\n        else\n          @animate.to layer, @settings.initialAnimationDuration, layer_css\n\n        return\n      return\n\n\n    ###\n    Set layer z-index for overlapping\n    ###\n    @set_layer_index = =>\n      # Set layer z-index for overlapping\n      @layers.each (index, layer) =>\n        $(layer).css 'z-index': @layers.length - index\n        return\n      return\n\n    ###\n    Sets parameters based on orientation settings\n    ###\n    @set_orientation = (orientation) =>\n      @param = {}\n\n      if orientation == 'vertical'\n        @param.size = 'height'\n        @param.middle = 'vmiddle'\n        @param.start = 'top'\n        @param.end = 'bottom'\n        @param.axis = 'y'\n        @param.scroll = 'scrollTop'\n        @param.half = 'halfHeight'\n      else\n        @param.size = 'width'\n        @param.middle = 'hmiddle'\n        @param.start = 'left'\n        @param.end = 'right'\n        @param.axis = 'x'\n        @param.scroll = 'scrollLeft'\n        @param.half = 'halfWidth'\n      return\n    @setOrientation = @set_orientation\n\n    ###\n    Set current responsive range parameter as xs, sm, md, lg or xl\n    ###\n    @set_responsive_context = =>\n      if @window_width >= @settings.screen.xl\n        @current_responsive_size = 'xl'\n      else if @window_width >= @settings.screen.lg\n        @current_responsive_size = 'lg'\n      else if @window_width >= @settings.screen.md\n        @current_responsive_size = 'md'\n      else if @window_width >= @settings.screen.sm\n        @current_responsive_size = 'sm'\n      else\n        @current_responsive_size = 'xs'\n\n      @log \"Responsive context is #{@current_responsive_size}.\"\n      return\n\n\n    ###\n    Add dynamic element classes and\n    ###\n    @set_classes = =>\n      if $('#imagine-style').length == 0\n        imagine_style = \".imagine-parent {\n                    perspective: #{@settings.perspective}px;\n                    -moz-perspective: #{@settings.perspective}px;\n                    -webkit-perspective: #{@settings.perspective}px;\n                    perspective-origin: #{@settings.perspectiveOrigin};\n                    -moz-perspective-origin: #{@settings.perspectiveOrigin};\n                    -webkit-perspective-origin: #{@settings.perspectiveOrigin};\n                    backface-visibility: hidden;\n                    -moz-backface-visibility: hidden;\n                    -webkit-backface-visibility: hidden;\n                  }\"\n        style = document.createElement('style');\n        style.id = 'imagine-style';\n        style.type = 'text/css';\n        style.innerHTML = imagine_style\n        $('head')[0].appendChild(style);\n\n      # Add imagine parent class\n      if @settings.animateElement\n        @parent.addClass 'imagine-parent'\n      else\n        @element.addClass 'imagine-parent'\n\n      # Add canvas class if there's a background element\n      if @background.length > 0\n        @element.addClass 'imagine-canvas'\n\n      # Add imagine animated class\n      @element.addClass 'imagine-animated'\n      @background.addClass 'imagine-animated'\n      @layers.addClass 'imagine-animated'\n      return\n\n\n    ###\n    Binds the window resize event to cache current window\n    width and height and to set the layout up\n    ###\n    @bind_resize = =>\n      @window.resize =>\n        @set_size()\n        @set_position()\n        @set_responsive_context()\n\n        @parallax()\n        return\n      return\n\n\n    ###\n    Rendering performance optimization ticking for debouncing purposes\n    ###\n    @ticking = false\n    @stop_ticking = =>\n      @ticking = false\n      return\n    if @settings.optimize\n      @start_ticking = =>\n        @ticking = true\n        return\n    else\n      @start_ticking = =>\n        @ticking = false\n        return\n\n\n    ###\n    Scroll animation handler\n    ###\n    @in_view_eariler = false\n    @scroll = =>\n      @position.window[@param.start] = @window[@param.scroll]()\n      @position.window[@param.end] = @position.window[@param.start] + @size.window[@param.size]\n      @position.window[@param.middle] = @position.window[@param.start] + @size.window[@param.half]\n\n      # Translated value\n      if @element[0]._gsTransform && @element[0]._gsTransform[@param.axis]\n        translation = @element[0]._gsTransform[@param.axis]\n      else\n        translation = 0\n\n      # Check if element is in view\n      in_view_tolerance = @position.window[@param.half] - translation\n      @in_view = !(@position.window[@param.end] - @position.source[@param.start] + in_view_tolerance < 0  ||\n                   @position.window[@param.start] - @position.source[@param.end] - in_view_tolerance > 0 )\n\n      # Toggle imagine-visible and imagine-hidden classes and\n      # trigger a visible event\n      if @in_view\n        if not @in_view_eariler\n          @in_view_eariler = true\n          @element.addClass 'imagine-visible'\n          @element.removeClass 'imagine-hidden'\n          @element.triggerHandler 'imagine.visible', [@in_view]\n      else\n        if @in_view_eariler\n          @in_view_eariler = false\n          @element.removeClass 'imagine-visible'\n          @element.addClass 'imagine-hidden'\n          @element.triggerHandler 'imagine.visible', [@in_view]\n\n        # Stop if element is loaded\n        if @loaded\n          return\n\n      # If previous animation frame has finished, render the new one\n      if not @ticking\n        @start_ticking()\n        @parallax()\n      return\n\n    ###\n    Bind the window scroll event to fade content on scroll down\n    ###\n    @bind_scroll = =>\n      @window.on 'scroll', @scroll\n      return\n\n\n    ###\n    Set the element id if it doesn't have one or\n    get the existing one\n    ###\n    @set_element_id = =>\n      # Get or set element ID\n      if @element.attr('id')?\n        @id = @element.attr 'id'\n      else\n        @id = @get_random_id 'imagine'\n        @element.attr 'id', @id\n\n      @log \"Element id has been set to #{@id}.\"\n      return\n\n\n    ###\n    Setup Animation Platform\n    ###\n    @set_animator = =>\n      @animate = window[@settings.animate]\n      @log \"Animating using the #{@settings.animate} platform.\"\n      return\n\n\n    ###\n    Get a random id by concatenating input string\n    with a random number\n    ###\n    @get_random_id = (string) ->\n      return string + '-' + Math.floor((Math.random() * 100000) + 1)\n\n\n    ###\n    Get the size of an image element\n    ###\n    @get_image_size = (image) =>\n      size = {}\n\n      # Get image width\n      size.width = if image[0].naturalWidth?\n                    image[0].naturalWidth\n                   else if image[0].width?\n                    image[0].width\n                   else if image.width?\n                    image.width()\n                   else\n                    'auto'\n\n      # Get image height\n      size.height = if image[0].naturalHeight?\n                      image[0].naturalHeight\n                    else if image[0].height?\n                      image[0].height\n                    else if image.height?\n                      image.height()\n                    else\n                      'auto'\n\n      return size\n\n\n\n    ###\n    Debounce helper to make resize happen every n milliseconds\n    ###\n    @debounce = (func, wait, immediate) ->\n      timeout = undefined\n      ->\n        context = this\n        args = arguments\n\n        later = ->\n          timeout = null\n          if not immediate\n            func.apply context, args\n          return\n\n        callNow = immediate and !timeout\n        clearTimeout timeout\n        timeout = setTimeout(later, wait)\n        if callNow\n          func.apply context, args\n        return\n\n    ###\n    Delete an object property and return its value\n    ###\n    @delete_property = (object, property) ->\n      temporary = object[property]\n      delete object[property]\n      return temporary\n\n    ###\n    Extend given default settings with user input\n    ###\n    @extend_settings = (id, defaults) =>\n      if @settings[id]?\n        @settings[id] = $.extend {}, defaults, @settings[id]\n      else\n        @settings[id] = defaults\n\n    ###\n    Logger snippet within Imagine\n    ###\n    @log = (item) =>\n      return unless @debug\n\n      if typeof item == 'object'\n        console.log \"[Imagine #{@id}]\", item\n      else\n        console.log \"[Imagine #{@id}] #{item}\"\n      return\n\n    ###\n    Error logger snippet within Imagine\n    ###\n    @error = (item) =>\n      if typeof item == 'object'\n        console.error \"[Imagine #{@id}]\", item\n      else\n        console.error \"[Imagine #{@id}] #{item}\"\n      return\n\n    @initialize()\n    return\n\n  # Lightweight plugin wrapper that prevents multiple instantiations.\n  #\n  $.fn.imagine = (opts) ->\n    @each (index, element) ->\n      unless $.data element, \"imagine\"\n        $.data element, \"imagine\", new $.imagine element, opts\n\n) window.jQuery, window, document\n"]}
